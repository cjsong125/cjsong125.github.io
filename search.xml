<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法题（数组篇）</title>
    <url>/algo-array/</url>
    <content><![CDATA[<h1>1、简介</h1>
<blockquote>
<p>分类刷算法题（语言：java）：</p>
<p>​	博主将陆续按分类顺序发布力扣算法题的解析与代码。部分代码参考力扣解析，仅供参考，如有疑问，评论探讨。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>数组篇：</strong></p>
<p>遇到不会的排序试试</p>
<p>正向走不通反向思考</p>
</blockquote>
<h1>2、例题推荐</h1>
<h2 id="2-1、数组的遍历">2.1、数组的遍历</h2>
<h3 id="485-最大连续-1-的个数">485. 最大连续 1 的个数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210830193615584.png" alt="image-20210830193615584"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;  <span class="comment">//数组长度</span></span><br><span class="line">        <span class="keyword">int</span> cur_num = <span class="number">0</span>;  <span class="comment">//当前1的数量</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;  <span class="comment">//最大连续1的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;  <span class="comment">//循环遍历数组元素</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;  <span class="comment">//当前元素为0时，将当前记录1的数量设为0</span></span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="comment">//当前元素为1的情况</span></span><br><span class="line">                index++; </span><br><span class="line">                <span class="keyword">if</span> (index &gt; max)&#123;  <span class="comment">//每次都与最大值比较，当前1的数量大于max，就赋值给max</span></span><br><span class="line">                    max = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210831150555050.png" alt="image-20210831150555050"></p>
<h3 id="495-提莫攻击">495.提莫攻击</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210831150232735.png" alt="image-20210831150232735"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPoisonedDuration</span><span class="params">(<span class="keyword">int</span>[] timeSeries, <span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> poisoning_time = <span class="number">0</span>;  <span class="comment">//中毒时间</span></span><br><span class="line">        <span class="keyword">if</span> (timeSeries..length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> duration;  <span class="comment">//如果数组只有一个数据，相当于攻击一次，就直接返回持续时间即可</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; timeSeries..length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == timeSeries..length-<span class="number">1</span>) &#123;</span><br><span class="line">                poisoning_time += duration;  <span class="comment">//最后一次攻击，直接把中毒时间加上持续时间</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (timeSeries[i+<span class="number">1</span>] - timeSeries[i] &gt;= duration)&#123;  <span class="comment">//两次攻击时间大于持续时间</span></span><br><span class="line">                	poisoning_time += duration;</span><br><span class="line">            	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                	poisoning_time += timeSeries[i+<span class="number">1</span>] - timeSeries[i];  <span class="comment">//两次攻击时间小于持续时间，直接加上时间差</span></span><br><span class="line">            	&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> poisoning_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210831150324274.png" alt="image-20210831150324274"></p>
<h3 id="414-第三大的数">414.第三大的数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210831214906271.png" alt="image-20210831214906271"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len  = nums..length;  <span class="comment">//数组长度</span></span><br><span class="line">        <span class="keyword">long</span> first, second, third;</span><br><span class="line">        first = second = third = Long..MIN_VALUE;  <span class="comment">//定义前三的数字</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math..max(nums[<span class="number">0</span>], nums[len - <span class="number">1</span>]);  <span class="comment">//数组长度不足3，直接返回最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (cur == first || cur == second) &#123;  </span><br><span class="line">                <span class="keyword">continue</span>;  <span class="comment">//重复数值直接跳过</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; first) &#123;  <span class="comment">//当前值大于最大值，重新给一二三赋值</span></span><br><span class="line">                third = second;</span><br><span class="line">                second = first;</span><br><span class="line">                first = cur;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; second) &#123;  <span class="comment">//当前值大于第二大的值，重新给二三赋值</span></span><br><span class="line">                third = second;</span><br><span class="line">                second = cur;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; third) &#123;  <span class="comment">//当前值大于第三大的值，重新给三赋值</span></span><br><span class="line">                third = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> third == Long..MIN_VALUE ? (<span class="keyword">int</span>)first : (<span class="keyword">int</span>)third;  <span class="comment">//第三的值有改动就返回改动后的值，如果还是初始化的MIN_VALUE就返回最大值</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210831214956357.png" alt="image-20210831214956357"></p>
<h3 id="628-三个数的最大乘积">628.三个数的最大乘积</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210901133222070.png" alt="image-20210901133222070"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays..sort(nums);</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">if</span> (nums[len-<span class="number">1</span>] * nums[len-<span class="number">2</span>] * nums[len-<span class="number">3</span>] &gt; nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[len-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> nums[len-<span class="number">1</span>] * nums[len-<span class="number">2</span>] * nums[len-<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[len-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210901133310490.png" alt="image-20210901133310490"></p>
<h2 id="2-2、统计数组中的元素">2.2、统计数组中的元素</h2>
<h3 id="645-错误的集合">645.错误的集合</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210902164136576.png" alt="image-20210902164136576"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findErrorNums(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] cnts = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) cnts[x]++;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnts[i] == <span class="number">0</span>) ans[<span class="number">1</span>] = i;</span><br><span class="line">            <span class="keyword">if</span> (cnts[i] == <span class="number">2</span>) ans[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210902164312092.png" alt="image-20210902164312092"></p>
<h3 id="697-数组的度">697.数组的度</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210903143930144.png" alt="image-20210903143930144"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">50009</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findShortestSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[N];  <span class="comment">//存放每个数字出现在的次数</span></span><br><span class="line">        <span class="keyword">int</span>[] first = <span class="keyword">new</span> <span class="keyword">int</span>[N], last = <span class="keyword">new</span> <span class="keyword">int</span>[N];  <span class="comment">//记录每个数字的第一次出现的位置和最后出现的位置</span></span><br><span class="line">        Arrays..fill(first, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = nums[i];</span><br><span class="line">            max = Math..max(max, ++cnt[t]);  <span class="comment">//遍历得到最大的度</span></span><br><span class="line">            <span class="keyword">if</span> (first[t] == -<span class="number">1</span>) first[t] = i;  <span class="comment">//记录第一次出现的位置</span></span><br><span class="line">            last[t] = i;  <span class="comment">//记录最后出现的位置；</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = Integer..MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (cnt[t] == max) ans = Math..min(ans, last[t] - first[t] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210903144025429.png" alt="image-20210903144025429"></p>
<h3 id="448-找到所有数组中消失的数字">448.找到所有数组中消失的数字</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210904155753264.png" alt="image-20210904155753264"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组记录法，需要额外数组记录数值是否出现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] cnts = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];  <span class="comment">//建立数组记录数值的出现</span></span><br><span class="line">        Arrays..fill(cnts, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) cnts[n]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cnts[i] == <span class="number">0</span>) result..add(i);  <span class="comment">//cnts[i]==0说明没有出现当前数值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210904155720339.png" alt="image-20210904155720339"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//哈希记录，在原数组进行记录，不实用额外空间</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lenn = nums..length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = (num - <span class="number">1</span>) % len;  <span class="comment">// 原数组坐标是0-(len-1)，所以需要num-1；对数组长度取余</span></span><br><span class="line">            nums[x] += len;  <span class="comment">//加上数组长度后，所有出现过的数值的索引都会大于len</span></span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= len) &#123;  <span class="comment">//小于len就说明该数值没有出现过，添加到ans</span></span><br><span class="line">                ret..add(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210904163646180.png" alt="image-20210904163646180"></p>
<h3 id="442-数组中重复的数据">442.数组中重复的数据</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210905191936088.png" alt="image-20210905191936088"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序后前后数值对比，重复的加入到结果中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays..sort(nums);  <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) result..add(nums[i]);  <span class="comment">//对比，前后数值相同就加入到结果中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210905192118065.png" alt="image-20210905192118065"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//哈希标记</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = (x - <span class="number">1</span>) % len;  <span class="comment">//数组坐标是0-（len-1），所以减一除以长度就是该数值的索引</span></span><br><span class="line">            nums[y] += len;  <span class="comment">//数值索引位置的值加上数组长度</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">2</span> * len) result..add(i + <span class="number">1</span>);  <span class="comment">//如果数值出现两次，在上方就会加上了两次len，</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210905192011000.png" alt="image-20210905192011000"></p>
<h3 id="41-缺失的第一个正数">41.缺失的第一个正数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210907153657454.png" alt="image-20210907153657454"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*哈希表记录（参考力扣官方解析，来源：力扣（LeetCode））</span></span><br><span class="line"><span class="comment">	对于一个长度为N的数组，其中没有出现的最小正整数只能在[1,N+1] 中。这是因为如果[1,N] 都出现了，那么答案是N+1，否则答案是[1,N] 中没有出现的最小正整数。</span></span><br><span class="line"><span class="comment">	所以我们先将负数都设置为大于数组长度len的数，再将数值小于等于len的数的索引位置取负数，这样就可以再次遍历数组，第一个出现正数的数组下标加1就是最终结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="comment">// 将负数都取大于len的数，我们取len+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将小于等于len的元素对应的位置变为负数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = Math..abs(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= len) &#123;</span><br><span class="line">                nums[num - <span class="number">1</span>] = -Math..abs(nums[num - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回第一个大于0的元素下标+1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt;= <span class="number">0</span>) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210907153834803.png" alt="image-20210907153834803"></p>
<h3 id="274-H指数">274.H指数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210908141157229.png" alt="image-20210908141157229"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*排序法</span></span><br><span class="line"><span class="comment">	将数组排序，并从大到小遍历，最初将h设为0，每次遍历的值大于h，就将h+1，直到h无法再增加。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        Arrays..sort(citations);</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = citations..length - <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; citations[i] &gt; h) &#123;</span><br><span class="line">            h++; </span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210908141454984.png" alt="image-20210908141454984"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*数组计数</span></span><br><span class="line"><span class="comment">	根据题目可知h是一个不大于论文篇数n的数；建立一个数组来记录每个h的论文篇数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = citations..length;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] counter = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];  <span class="comment">//计数数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (citations[i] &gt;= n) &#123;  <span class="comment">//因为h不大于论文篇数n，大于总篇数n的全部放在count[n]中</span></span><br><span class="line">                counter[n]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                counter[citations[i]]++;  <span class="comment">//记录每个h的论文篇数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;  <span class="comment">//从大到小遍历</span></span><br><span class="line">            total += counter[i];  <span class="comment">//大于或等于当前引用次数i的总论文数</span></span><br><span class="line">            <span class="keyword">if</span> (total &gt;= i) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210908142010151.png" alt="image-20210908142010151"></p>
<h2 id="2-3、数组的改变、移动">2.3、数组的改变、移动</h2>
<h3 id="453-最小操作次数使数组元素相等">453.最小操作次数使数组元素相等</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210909162000724.png" alt="image-20210909162000724"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*排序法</span></span><br><span class="line"><span class="comment">	思路：本题正向思路是每次给n-1个元素+1，最少几次使得数组元素全部相等。我们可以反向思考一下，其实就是将最大的元素-1然后所有元素+1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays..sort(nums);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            res += nums[i] - nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210909162037605.png" alt="image-20210909162037605"></p>
<h3 id="283-移动零">283.移动零</h3>
<p><img src="/algo-array/image-20210924143623905.png" alt="image-20210924143623905"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;  <span class="comment">// 记录0的个数</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i - count] = nums[i];  <span class="comment">// 将非0数字往前移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums[len - count] = <span class="number">0</span>;  <span class="comment">// 后面补0</span></span><br><span class="line">            count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210924143743347.png" alt="image-20210924143743347"></p>
<h2 id="2-4、二维数组及滚动数组">2.4、二维数组及滚动数组</h2>
<h3 id="118-杨辉三角">118.杨辉三角</h3>
<p><img src="/algo-array/image-20210924145516923.png" alt="image-20210924145516923"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;  <span class="comment">// 前后添加1</span></span><br><span class="line">                    row..add(<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    row..add(ret..get(i - <span class="number">1</span>)..get(j - <span class="number">1</span>) + ret..get(i - <span class="number">1</span>)..get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret..add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210924145648020.png" alt="image-20210924145648020"></p>
<h3 id="119-杨辉三角II">119.杨辉三角II</h3>
<p><img src="/algo-array/image-20210924150107217.png" alt="image-20210924150107217"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; C = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rowIndex; ++i) &#123;</span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">                    row..add(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    row..add(C..get(i - <span class="number">1</span>)..get(j - <span class="number">1</span>) + C..get(i - <span class="number">1</span>)..get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            C..add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C..get(rowIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210924150203187.png" alt="image-20210924150203187"></p>
<h3 id="598-范围求和II">598.范围求和II</h3>
<p><img src="/algo-array/image-20210925141511488.png" alt="image-20210925141511488"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 本题可以用暴力解法，但是复杂度比较大</span></span><br><span class="line"><span class="comment">* 据题意，每次增加1都是从数组[0][0]开始，所以会有交集，最大整数肯定出现在数值[0][0]的这个交集中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] ops)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] op: ops) &#123;</span><br><span class="line">            m = Math..min(m, op[<span class="number">0</span>]);</span><br><span class="line">            n = Math..min(n, op[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210925142530640.png" alt="image-20210925142530640"></p>
<h2 id="2-5、数组的旋转">2.5、数组的旋转</h2>
<h3 id="189-旋转数组">189.旋转数组</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211008113105216.png" alt="image-20211008113105216"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接暴力解法（超时），直接一个一个的移动</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[len-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len-<span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            nums[<span class="number">0</span>] = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组反转（参考力扣官方解析）</span></span><br><span class="line"><span class="comment">// 基本步骤：先将数组整体翻转，在分别翻转前后两个部分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        k %= nums..length;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, nums..length - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, k, nums..length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start += <span class="number">1</span>;</span><br><span class="line">            end -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>原始数组</td>
<td>1 2 3 4 5 6 7</td>
</tr>
<tr>
<td>翻转所有元素</td>
<td>7 6 5 4 3 2 1</td>
</tr>
<tr>
<td>翻转[0, k mod n-1]区间的元素</td>
<td>5 6 7 4 3 2 1</td>
</tr>
<tr>
<td>翻转[k mod n, n-1]区间的元素</td>
<td>5 6 7 1 2 3 4</td>
</tr>
</tbody>
</table>
<h3 id="396-旋转函数">396.旋转函数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211009110251883.png" alt="image-20211009110251883"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在上一题的基础上修改(超时)，每一翻转一个数，计算总和比大小。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRotateFunction</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            max += i * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            reverse(nums, <span class="number">0</span>, nums..length - <span class="number">1</span>);</span><br><span class="line">            reverse(nums, <span class="number">1</span>, nums..length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums..length; j++) &#123;</span><br><span class="line">                sum += j * nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max) max = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start += <span class="number">1</span>;</span><br><span class="line">            end -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：错位相减法</p>
<p>（作者：yixingzhang 链接：<a href="https://leetcode-cn.com/problems/rotate-function/solution/qian-lu-qi-qu-wang-wo-men-ke-yi-hu-xiang-iqax/">https://leetcode-cn.com/problems/rotate-function/solution/qian-lu-qi-qu-wang-wo-men-ke-yi-hu-xiang-iqax/</a>](<a href="https://leetcode-cn.com/u/yixingzhang/">https://leetcode-cn.com/u/yixingzhang/</a>)）</p>
<p>$$<br>
F(k) = 0 * A[0] + 1 * A[1] + … + (n-1) * A[n-1] \<br>
F(k+1) = 0 * A[n-1] + 1 * A[0] + 2 * A[1] + … + (n-1) * A[n-2] \<br>
F(k+1) - F(k) = -(n-1) * A[n-1] + 1 * A[0] + 1 * A[1] + … + 1 * A[n-2] \<br>
F(k+1) = F(k) - n * A[n-1] + 所有数的和 \<br>
F(k+i) = F(k+i-1) - n * A[n-i] + 所有数的和<br>
$$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用到了数学的错位相减，可能不一定能想到</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRotateFunction</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums..length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 统计数组所有数的和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 计算 F(0) 的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            max += count++ * i;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录上一个计算结果</span></span><br><span class="line">        <span class="keyword">int</span> tmp = max;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 利用等差数列求解</span></span><br><span class="line">            tmp = tmp + sum - n * nums[n - i];</span><br><span class="line">            <span class="keyword">if</span> (max &lt; tmp) &#123;</span><br><span class="line">                max = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211010095254289.png" alt="image-20211010095254289"></p>
<h2 id="2-6、特定顺序遍历二维数组">2.6、特定顺序遍历二维数组</h2>
<h3 id="54-螺旋矩阵">54.螺旋矩阵</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211021125924036.png" alt="image-20211021125924036"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路（参考力扣）：</span></span><br><span class="line"><span class="comment">	本题的数组循环不再是简单的双重选好就可以解决。可以看到仔细观察，这个循环的一个周期是什么，起止分别是什么：</span></span><br><span class="line"><span class="comment">	左上——》右上——》右下——》左下——》左上——》（第二个循环的左上）D:\Learning\PersonalBlog\CodeChenBlog\source/algo-arrayD:\Learning\PersonalBlog\CodeChenBlog\source/algo-arrayD:\Learning\PersonalBlog\CodeChenBlog\source/algo-array..</span></span><br><span class="line"><span class="comment">	这是一个完整的循环，所以依照这个思路写算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> rows = matrix..length, columns = matrix[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = columns - <span class="number">1</span>, top = <span class="number">0</span>, bottom = rows - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix..length == <span class="number">0</span> || matrix[<span class="number">0</span>]..length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line">            <span class="comment">// 左上——》右上</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> column = left; column &lt;= right; column++)&#123;</span><br><span class="line">                res..add(matrix[top][column]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右上——》右下</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> row = top + <span class="number">1</span>; row &lt;= bottom; row++)&#123;</span><br><span class="line">                res..add(matrix[row][right]);</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">            <span class="keyword">if</span> (left &lt; right &amp;&amp; top &lt; bottom) &#123;</span><br><span class="line">                <span class="comment">// 右下——》左下</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> column = right - <span class="number">1</span>; column &gt;= left; column--) &#123;</span><br><span class="line">                    res..add(matrix[bottom][column]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 左下——》左上</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> row = bottom - <span class="number">1</span>; row &gt; top; row--) &#123;</span><br><span class="line">                    res..add(matrix[row][left]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 四个边界都向中间收拢</span></span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            top++;</span><br><span class="line">            bottom--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/C:%5CUsers%5C86158%5CDesktop%5C%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211021124843.png" alt="微信图片_20211021124843"></p>
<h3 id="59-螺旋矩阵II">59.螺旋矩阵II</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211023135855902.png" alt="image-20211023135855902"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	这个题和上一个题其实是一样的，上一个题给了一个二维数组，需要螺旋给出相应结果；本题需要自己螺旋的建立一个数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>, top = <span class="number">0</span>, bottom = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> column = left; column &lt;= right; column++) &#123;</span><br><span class="line">                matrix[top][column] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> row = top + <span class="number">1</span>; row &lt;= bottom; row++) &#123;</span><br><span class="line">                matrix[row][right] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt; right &amp;&amp; top &lt; bottom) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> column = right -<span class="number">1</span>; column &gt;= left; column--) &#123;</span><br><span class="line">                    matrix[bottom][column] = num;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> row = bottom - <span class="number">1</span>; row &gt; top; row--) &#123;</span><br><span class="line">                    matrix[row][left] = num;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            top++;</span><br><span class="line">            bottom--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211023112532355.png" alt="image-20211023112532355"></p>
<h3 id="498-对角线遍历">498.对角线遍历</h3>
<p>题目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">（参考力扣官方解析）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findDiagonalOrder(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix..length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> N = matrix..length;</span><br><span class="line">        <span class="keyword">int</span> M = matrix[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, column = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定标志位来确定对角线走向，向上走还是向下走</span></span><br><span class="line">        <span class="keyword">int</span> direction = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[N*M];</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (row &lt; N &amp;&amp; column &lt; M) &#123;</span><br><span class="line">            </span><br><span class="line">            result[r++] = matrix[row][column];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过判断对角线走向来给row和column进行加或减</span></span><br><span class="line">            <span class="keyword">int</span> new_row = row + (direction == <span class="number">1</span> ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> new_column = column + (direction == <span class="number">1</span> ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否是对角线走向最后一个元素 </span></span><br><span class="line">            <span class="keyword">if</span> (new_row &lt; <span class="number">0</span> || new_row == N || new_column &lt; <span class="number">0</span> || new_column == M) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (direction == <span class="number">1</span>) &#123;</span><br><span class="line">                    row += (column == M - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>) ;</span><br><span class="line">                    column += (column &lt; M - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    column += (row == N - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                    row += (row &lt; N - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 转向</span></span><br><span class="line">                direction = <span class="number">1</span> - direction;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                row = new_row;</span><br><span class="line">                column = new_column;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211023223126569.png" alt="image-20211023223126569"></p>
<h2 id="2-7、二维数组变换">2.7、二维数组变换</h2>
<h3 id="566-重塑矩阵">566.重塑矩阵</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211024111542427.png" alt="image-20211024111542427"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解法一：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] matrixReshape(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span> r, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">int</span> M = mat..length;</span><br><span class="line">        <span class="keyword">int</span> N = mat[<span class="number">0</span>]..length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出不合理，返回原数组</span></span><br><span class="line">        <span class="keyword">if</span> (M * N != r * c) &#123;</span><br><span class="line">            <span class="keyword">return</span> mat;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建结果数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, col = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="comment">// 控制结果数组的换行，当col到最后一列时就换行，将row+1换行，col置0，重新从第一列第row+1行开始存数据</span></span><br><span class="line">                <span class="keyword">if</span> (col == c) &#123;</span><br><span class="line">                    row += <span class="number">1</span>;</span><br><span class="line">                    col = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res[row][col] = mat[i][j];</span><br><span class="line">                col += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211024111509427.png" alt="image-20211024111509427"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解法二(力扣官方解析):主要就是在存储数据时用了数学的除和取余，可能一般不一定能想到，思想和解法一是类似的，都是以列为基准来控制换行，取余就是列在递增，除整就是控制换行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] matrixReshape(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span> r, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = mat..length;</span><br><span class="line">        <span class="keyword">int</span> n = mat[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">if</span> (m * n != r * c) &#123;</span><br><span class="line">            <span class="keyword">return</span> mat;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; m * n; ++x) &#123;</span><br><span class="line">            ans[x / c][x % c] = mat[x / n][x % n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211024112152336.png" alt="image-20211024112152336"></p>
<h3 id="48-旋转图像">48.旋转图像</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211025111528637.png" alt="image-20211025111528637"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参考力扣官方解析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix..length;</span><br><span class="line">        <span class="comment">// 水平翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[n - i - <span class="number">1</span>][j];</span><br><span class="line">                matrix[n - i - <span class="number">1</span>][j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 主对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211025111659404.png" alt="image-20211025111659404"></p>
<h3 id="73-矩阵置零">73.矩阵置零</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028100343736.png" alt="image-20211028100343736"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参考：</span></span><br><span class="line"><span class="comment">作者：powcai</span></span><br><span class="line"><span class="comment">链接：https://leetcode-cn..com/problems/set-matrix-zeroes/solution/o1kong-jian-by-powcai/</span></span><br><span class="line"><span class="comment">来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这么版本较好理解</span></span><br><span class="line"><span class="comment">解析：主要需要想到将第一行和第一列作为标志位，最后的置零就通过第一行和第一列来判断是否置零。</span></span><br><span class="line"><span class="comment">	1、设置两个标志记录第一行和第一列是否存在0</span></span><br><span class="line"><span class="comment">	2、遍历除第一行和第一列元素，如果是0就将对应的第一行和第一列元素置零</span></span><br><span class="line"><span class="comment">	3、最后通过第一行和第一列为0的对应行和列置零</span></span><br><span class="line"><span class="comment">	4、第一步的两个标志如果是第一行和第一列原始数据就存在0，就需要将第一行或（和）第一列置零</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = matrix..length;</span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">boolean</span> row0_flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> col0_flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 第一行是否有零</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                row0_flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一列是否有零</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                col0_flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把第一行第一列作为标志位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 置0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span> || matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (row0_flag) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (col0_flag) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211026111942252.png" alt="image-20211026111942252"></p>
<h2 id="2-8、前缀和数组">2.8、前缀和数组</h2>
<h3 id="303-区域和检索-数据不可变">303.区域和检索-数据不可变</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028100658628.png" alt="image-20211028100658628"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析：主要在数据处理时就将每一个数的前缀和求出，并存储起来，最后简单计算返回结果即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] sums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums..length;</span><br><span class="line">        sums = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sums[i + <span class="number">1</span>] = sums[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sums[right + <span class="number">1</span>] - sums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211028100843776.png" alt="image-20211028100843776"></p>
<h3 id="304-二维区域和检索-矩阵不可变">304.二维区域和检索 - 矩阵不可变</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028101439324.png" alt="image-20211028101439324"></p>
<p><img src="/algo-array/1614646585-JOesrN-304.002.jpeg" alt="1614646585-JOesrN-304.002.jpeg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析：本题思路和上一题一样，需要处理数据，存储所有的前缀和，但是二维数据计算前缀和会复杂一点。需要将整体和一些局部相加减。</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] sums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix..length;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = matrix[<span class="number">0</span>]..length;</span><br><span class="line">            sums = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="comment">// 当前格子的和 = 上方的格子的和 + 左边的格子的和的 - 左上角的格子的和 + 当前格子的值[和是指对应的前缀和，值是指原数组中的值]</span></span><br><span class="line">                    sums[i + <span class="number">1</span>][j + <span class="number">1</span>] = sums[i][j + <span class="number">1</span>] + sums[i + <span class="number">1</span>][j] - sums[i][j] + matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sums[row2 + <span class="number">1</span>][col2 + <span class="number">1</span>] - sums[row1][col2 + <span class="number">1</span>] - sums[row2 + <span class="number">1</span>][col1] + sums[row1][col1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211028101712061.png" alt="image-20211028101712061"></p>
<h3 id="238-除自身意外数组的乘积">238.除自身意外数组的乘积</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028141727060.png" alt="image-20211028141727060"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作者：LeetCode-Solution</span></span><br><span class="line"><span class="comment">链接：https://leetcode-cn..com/problems/product-of-array-except-self/solution/chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode-/</span></span><br><span class="line"><span class="comment">来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解析：简单的使用双重循环求结果会超时，所以需要优化。</span></span><br><span class="line"><span class="comment">为了减少计算次数，我们需要将每次计算结果存储，每次就只需要乘一次。</span></span><br><span class="line"><span class="comment">建立一个数组answer，存结果。首先从左遍历原数据，将左边的数据相乘存储在answer中，从而得到所有的左边乘积。</span></span><br><span class="line"><span class="comment">再在answer中从右边开始遍历，设定一个变量存储右边的乘积，每次将右边的乘积乘以左边的乘积answer[i]，最后得到的answer就是结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// answer[i] 表示索引 i 左侧所有元素的乘积</span></span><br><span class="line">        <span class="comment">// 因为索引为 &#x27;0&#x27; 的元素左侧没有元素， 所以 answer[0] = 1</span></span><br><span class="line">        answer[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            answer[i] = nums[i - <span class="number">1</span>] * answer[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// R 为右侧所有元素的乘积</span></span><br><span class="line">        <span class="comment">// 刚开始右边没有元素，所以 R = 1</span></span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 对于索引 i，左边的乘积为 answer[i]，右边的乘积为 R</span></span><br><span class="line">            answer[i] = answer[i] * R;</span><br><span class="line">            <span class="comment">// R 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 R 上</span></span><br><span class="line">            R *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211028142110706.png" alt="image-20211028142110706"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>算法</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的*args和**kwargs</title>
    <url>/pyArgsKwargs/</url>
    <content><![CDATA[<h1 id="args和-kwargs"><a href="#args和-kwargs" class="headerlink" title="*args和**kwargs"></a>*args和**kwargs</h1><p><code>*args</code> 和 <code>**kwargs</code> 主要用于函数定义。 你可以将不定数量的参数传递给一个函数。</p>
<p>这里的不定的意思是：预先并不知道, 函数使用者会传递多少个参数给你, 所以在这个场景下使用这两个关键字。</p>
<span id="more"></span>

<ul>
<li><p><code>*args</code> 是用来发送一个非键值对的可变数量的参数列表给一个函数.</p>
<p>这里有个例子帮你理解这个概念:</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def test_var_args(f_arg, *argv):</span><br><span class="line">    print(&quot;first normal arg:&quot;, f_arg)</span><br><span class="line">    for arg in argv:</span><br><span class="line">        print(&quot;another arg through *argv:&quot;, arg)</span><br><span class="line"></span><br><span class="line">test_var_args(&#x27;yasoob&#x27;, &#x27;python&#x27;, &#x27;eggs&#x27;, &#x27;test&#x27;)</span><br></pre></td></tr></table></figure>

<p>这会产生如下输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">first normal arg: yasoob</span><br><span class="line">another arg through *argv: python</span><br><span class="line">another arg through *argv: eggs</span><br><span class="line">another arg through *argv: test</span><br></pre></td></tr></table></figure>



<ul>
<li><p><code>**kwargs</code> 允许你将不定长度的<strong>键值对</strong>, 作为参数传递给一个函数。 如果你想要在一个函数里处理<strong>带名字的参数</strong>, 你应该使用<code>**kwargs</code>。</p>
<p>这里有个让你上手的例子:</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_me</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; == &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(key, value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet_me(name=<span class="string">&quot;yasoob&quot;</span>)</span><br><span class="line">name == yasoob</span><br></pre></td></tr></table></figure>

<p>现在你可以看出我们怎样在一个函数里, 处理了一个<strong>键值对</strong>参数了。</p>
<p>这就是<code>**kwargs</code>的基础, 而且你可以看出它有多么管用。 接下来让我们谈谈，你怎样使用<code>*args</code> 和 <code>**kwargs</code>来调用一个参数为列表或者字典的函数。</p>
<ul>
<li><p>使用*args和**kwargs来调用函数</p>
<p>那现在我们将看到怎样使用<code>*args</code>和<code>**kwargs</code> 来调用一个函数。 假设，你有这样一个小函数：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_args_kwargs</span>(<span class="params">arg1, arg2, arg3</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg1:&quot;</span>, arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg2:&quot;</span>, arg2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg3:&quot;</span>, arg3)</span><br></pre></td></tr></table></figure>

<p>你可以使用<code>*args</code>或<code>**kwargs</code>来给这个小函数传递参数。 下面是怎样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先使用 *args</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="string">&quot;two&quot;</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_args_kwargs(*args)</span><br><span class="line">arg1: two</span><br><span class="line">arg2: <span class="number">3</span></span><br><span class="line">arg3: <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在使用 **kwargs:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwargs = &#123;<span class="string">&quot;arg3&quot;</span>: <span class="number">3</span>, <span class="string">&quot;arg2&quot;</span>: <span class="string">&quot;two&quot;</span>, <span class="string">&quot;arg1&quot;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_args_kwargs(**kwargs)</span><br><span class="line">arg1: <span class="number">5</span></span><br><span class="line">arg2: two</span><br><span class="line">arg3: <span class="number">3</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>标准参数与<code>*args、**kwargs</code>在使用时的顺序</p>
<p>那么如果你想在函数里同时使用所有这三种参数， 顺序是这样的：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">some_func(fargs, *args, **kwargs)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>何时使用？</p>
<p>这需要根据需求而定。最常见的用例是在写函数装饰器的时候。</p>
<p>此外它也可以用来做猴子补丁(monkey patching)。猴子补丁的意思是在程序运行时(runtime)修改某些代码。 打个比方，你有一个类，里面有个叫<code>get_info</code>的函数会调用一个API并返回相应的数据。如果我们想测试它，可以把API调用替换成一些测试数据。例如：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> someclass</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test data&quot;</span></span><br><span class="line"></span><br><span class="line">someclass.get_info = get_info</span><br></pre></td></tr></table></figure>



<p>文章内容来自：<a href="https://docs.pythontab.com/interpy/args_kwargs/When_to_use/">https://docs.pythontab.com/interpy/args_kwargs/When_to_use/</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode精选TOP面试题——简单篇</title>
    <url>/algo-interviewTop-easy/</url>
    <content><![CDATA[<h1 id="LeetCode-精选-TOP-面试题——简单篇"><a href="#LeetCode-精选-TOP-面试题——简单篇" class="headerlink" title="LeetCode 精选 TOP 面试题——简单篇"></a>LeetCode 精选 TOP 面试题——简单篇</h1><p>TOP 面试题简单篇，以下解析为Python语言。</p>
<span id="more"></span>

<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h1><p>题目：</p>
<p><img src="/algo-interviewTop-easy/1-1.jpg"></p>
<p>解析：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 哈希表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="comment"># 建立一个哈希表</span></span><br><span class="line">        hashtable = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> hashtable:</span><br><span class="line">                <span class="keyword">return</span> [hashtable[target - num], i]</span><br><span class="line">            hashtable[nums[i]] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>

<h1 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13.罗马数字转整数"></a>13.罗马数字转整数</h1><p>题目：</p>
<p><img src="/algo-interviewTop-easy/13-1.jpg"></p>
<p>解析：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        Roman2Int = &#123;<span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span>&#125;</span><br><span class="line">        Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> Roman2Int[s[index]] &lt; Roman2Int[s[index + <span class="number">1</span>]]:</span><br><span class="line">                Int -= Roman2Int[s[index]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Int += Roman2Int[s[index]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Int + Roman2Int[s[-<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>

<h1 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14.最长公共前缀"></a>14.最长公共前缀</h1><p>题目：</p>
<p><img src="/algo-interviewTop-easy/14-1.jpg"></p>
<p>解析:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 求出所有字符串中最短的字符串长度</span></span><br><span class="line">        str_len = <span class="built_in">len</span>(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &lt; str_len:</span><br><span class="line">                str_len = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 字符串中一个一个字符比较</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(str_len):</span><br><span class="line">            c = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strs:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span>[i] != c:</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">            res += c</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络体系结构</title>
    <url>/net-hierarchicalDivision/</url>
    <content><![CDATA[<ul>
<li><p>常见的计算机网络体系结构</p>
<span id="more"></span></li>
</ul>
<p><img src="/net-hierarchicalDivision/image-20211222215636759.png"></p>
<blockquote>
<ul>
<li>物理层：<strong>该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。</strong>物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</li>
<li>数据链路层：该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。基本数据单位为帧。主要的协议为以太网协议。两个重要的设备名称为网桥和交换机。</li>
<li>网络层：具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。</li>
<li>传输层：传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。包含的主要协议：TCP协议（Transmission Control Protocol，传输控制协议）、UDP协议（User Datagram Protocol，用户数据报协议）；重要设备：网关。</li>
<li>会话层：会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</li>
<li>表示层：表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</li>
<li>应用层：为操作系统或网络应用程序提供访问网络服务的接口。</li>
</ul>
<p>会话层、表示层和应用层重点：</p>
<ul>
<li>1&gt; 数据传输基本单位为报文；</li>
<li>2&gt; 包含的主要协议：FTP（文件传送协议）、Telnet（远程登录协议）、DNS（域名解析协议）、SMTP（邮件传送协议），POP3协议（邮局协议），HTTP协议（Hyper Text Transfer Protocol）。</li>
</ul>
</blockquote>
<p><img src="/net-hierarchicalDivision/image-20211222221854834.png"></p>
<p>数据传输过程，详情看：<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1c4411d7jb?p=9&amp;spm_id_from=pageDriver</a></p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/docker-base/</url>
    <content><![CDATA[<p>Docker可以理解为自带环境的软件系统</p>
<span id="more"></span>

<h1 id="比较Docker和虚拟机技术的不同"><a href="#比较Docker和虚拟机技术的不同" class="headerlink" title="比较Docker和虚拟机技术的不同"></a>比较Docker和虚拟机技术的不同</h1><ul>
<li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li>
<li>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</li>
<li>每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响</li>
</ul>
<blockquote>
<p>DevOps（开发、运维）</p>
</blockquote>
<p><strong>应用更快速的交付和部署</strong></p>
<p>传统：一堆帮助文档，安装程序</p>
<p>Docker：打包镜像发布测试，一键运行</p>
<p><strong>更便捷的升级和扩缩容</strong></p>
<p>使用了Docker之后，我们部署应用就和搭积木一样！</p>
<p>项目打包为一个镜像，扩展服务器时直接运行镜像即可</p>
<p><strong>更简单的系统运维</strong></p>
<p>在容器化之后，我们的开发，测试环境都是高度一致的</p>
<p><strong>更高效的计算资源利用</strong></p>
<p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多容器实例，服务器的性能可以被压榨到极致</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><img src="/docker-base/1.jpg"></p>
<p><strong>镜像（image）：</strong></p>
<p>docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，Tomcat镜像==》run==》Tomcat01容器（提供服务器）</p>
<p><strong>容器（container）：</strong></p>
<p>docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的。</p>
<p>启动，停止，删除，基本命令</p>
<p>目前就可以把这个容器理解为就是一个简易的Linux系统</p>
<p><strong>仓库（repository）：</strong></p>
<p>仓库就是存放镜像的地方</p>
<p>仓库分为公有仓库和私有仓库</p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote>
<p>安装</p>
</blockquote>
<p>帮助文档：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、卸载旧的版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、需要的安装包</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、设置镜像的仓库</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo #默认的国外的</span><br><span class="line">    </span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \ </span><br><span class="line">	http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #换成阿里云的</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新yum</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、安装Docker相关东西 docker-ce社区版 ee企业版</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、启动Docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、测试运行hello world</span></span><br><span class="line">sudo docker run hello-world</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最初是没有hello-world镜像的，运行命令后会自动下载</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7、查看下载的镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/2.jpg"></p>
<h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">![3](D:\Learning\PersonalBlog\CodeChenBlog\source\_posts\docker-base\3.jpg)# 1、卸载依赖</span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、删除资源</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /var/lib/docker  docker的默认工作路径</span></span><br></pre></td></tr></table></figure>



<h2 id="回顾helloworld流程"><a href="#回顾helloworld流程" class="headerlink" title="回顾helloworld流程"></a>回顾helloworld流程</h2><p><img src="/docker-base/3.jpg"></p>
<h1 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h1><p><strong>Docker是怎么工作的？</strong></p>
<p>Docker是一个client-server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问</p>
<p>DockerServer接受到Docker-client的指令，就会执行这个命令</p>
<p><img src="/docker-base/4.jpg"></p>
<p><strong>Docker为什么比虚拟机（VM）快？</strong></p>
<ol>
<li><p>Docker有着比虚拟机更少的抽象层</p>
</li>
<li><p>Docker利用的是宿主机的内核，vm需要是Guest os</p>
<p><img src="/docker-base/5.jpg"></p>
</li>
</ol>
<p>所以，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest os，分钟级别的，而docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级的。</p>
<h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version     # 显示docker的版本信息</span><br><span class="line">docher info 	   # 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help  # 帮助命令</span><br></pre></td></tr></table></figure>

<p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/">https://docs.docker.com/engine/reference/commandline/</a></p>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p>docker images 查看本地的主机上所有镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   3 months ago   13.3kB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解析</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG         镜像的标签</span><br><span class="line">IMAGE ID    镜像的id</span><br><span class="line">CREATED     镜像的创建时间</span><br><span class="line">SIZE        镜像的大小</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">-a， --all   列出所有的镜像</span><br><span class="line">-q， --quiet 只显示镜像的id</span><br></pre></td></tr></table></figure>

<p><strong>docker search搜索镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11920     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4559      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   895                  [OK]</span><br><span class="line">percona                           Percona Server is a fork of the MySQL relati…   567       [OK]       </span><br><span class="line">phpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   415       [OK]       </span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   92                   </span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   90                   </span><br><span class="line">centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]</span><br><span class="line">databack/mysql-backup             Back up mysql databases to... anywhere!         54                   </span><br><span class="line">prom/mysqld-exporter                                                              46                   [OK]</span><br><span class="line">deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]</span><br><span class="line">tutum/mysql                       Base docker image to run a MySQL database se…   35                   </span><br><span class="line">linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   34                   </span><br><span class="line">schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   31                   [OK]</span><br><span class="line">mysql/mysql-router                MySQL Router provides transparent routing be…   23                   </span><br><span class="line">centos/mysql-56-centos7           MySQL 5.6 SQL database server                   21                   </span><br><span class="line">arey/mysql-client                 Run a MySQL client from a docker container      20                   [OK]</span><br><span class="line">fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   18                   [OK]</span><br><span class="line">genschsa/mysql-employees          MySQL Employee Sample Database                  9                    [OK]</span><br><span class="line">openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6                    </span><br><span class="line">ansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                3                    [OK]</span><br><span class="line">devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3                    </span><br><span class="line">jelastic/mysql                    An image of the MySQL database server mainta…   2                    </span><br><span class="line">centos/mysql-80-centos7           MySQL 8.0 SQL database server                   2                    </span><br><span class="line">widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">--filter=STARS=3000  # 搜索出来的镜像就是STARS大于3000的</span><br></pre></td></tr></table></figure>

<p><strong>docker pull 下载镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker pull mysql</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete </span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists </span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists </span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>

<p><strong>docker rmi 删除镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos ~]# docker rmi -f 容器id  # 删除指定的容器</span><br><span class="line">[root@VM-24-12-centos ~]# docker rmi -f 容器id 容器id 容器id  # 删除多个容器</span><br><span class="line">[root@VM-24-12-centos ~]# docker rmi -f $(docker images -aq)  # 删除全部容器</span><br></pre></td></tr></table></figure>



<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器</strong></p>
<p>下载centos镜像来测试学习</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>

<p><strong>新建容器并启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name=&quot;Name&quot;  # 容器名字，用来区分容器</span><br><span class="line">-d             # 后台方式运行</span><br><span class="line">-it            # 使用交互方式运行，进入容器查看内容</span><br><span class="line">-p             # 指定容器的端口 -p 8080:8080</span><br><span class="line">	-p ip：主机端口：容器端口</span><br><span class="line">	-p 主句端口：容器端口（常用）</span><br><span class="line">	-p 容器端口</span><br><span class="line">	容器端口</span><br><span class="line">-P              # 随机指定端口</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@0e3aa4e3d192 /]# ls  # 查看容器内的centos，基础版本，很多命令都是不完整的</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@0e3aa4e3d192 /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p><strong>列出所有运行中的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令</span></span><br><span class="line">    # 列出当前正在运行的容器</span><br><span class="line">-a  # 列出当前正在运行的容器+历史运行过的容器</span><br><span class="line">-n=？  # 显示最近创建的容器</span><br><span class="line">-q  # 只显示容器的编号</span><br><span class="line"></span><br><span class="line">[root@VM-24-12-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-24-12-centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">0e3aa4e3d192   centos        &quot;/bin/bash&quot;   3 minutes ago   Exited (0) 53 seconds ago             practical_chaplygin</span><br><span class="line">385350d5ac9c   hello-world   &quot;/hello&quot;      26 hours ago    Exited (0) 26 hours ago               vigilant_galileo</span><br></pre></td></tr></table></figure>

<p><strong>退出容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit  # 直接容器停止并退出</span><br><span class="line">ctrl+P+Q  # 容器不停止退出</span><br></pre></td></tr></table></figure>

<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id  # 删除指定的容器</span><br><span class="line">docker rm -f $(docker ps -aq)  # 删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure>

<p><strong>启动和停止容器的操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id  # 启动容器</span><br><span class="line">docker restart 容器id  # 重启容器</span><br><span class="line">docker stop 容器id  # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id  # 强制停止当前容器</span><br></pre></td></tr></table></figure>



<h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令docker run -d 镜像名</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker run -d centos</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps，发现centos停止了</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑：docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Nginx，容器启动后，发现自己没有提供服务，就会立即停止，就是没有程序了</span></span><br></pre></td></tr></table></figure>

<p><strong>查看日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 容器，没有日志</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自己写一段shell脚本</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker run -d centos /bin/sh -c &quot;while true;do echo cjsong;sleep 1;done&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@VM-24-12-centos ~]<span class="comment"># docker ps</span></span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS        PORTS     NAMES</span><br><span class="line">0f3c557a8105   centos    &quot;/bin/sh -c &#x27;while t…&quot;   2 seconds ago   Up 1 second             nervous_colden</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志</span></span><br><span class="line">-tf  # 显示日志</span><br><span class="line">--tail number  # 显示日志的条数</span><br><span class="line">[root@VM-24-12-centos ~]# docker logs -tf --tail 10 0f3c557a8105</span><br></pre></td></tr></table></figure>

<p><strong>查看容器中的进程信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker top 容器id</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker top 0f3c557a8105</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                30196               30177               0                   17:17               ?                   00:00:00            /bin/sh -c while true;do echo cjsong;sleep 1;done</span><br><span class="line">root                31689               30196               0                   17:23               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sl</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>查看镜像元数据</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker inspect 容器id</span></span><br><span class="line"></span><br><span class="line">[root@VM-24-12-centos ~]# docker inspect 0f3c557a8105</span><br></pre></td></tr></table></figure>

<p><strong>进入当前正在运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exex -it 容器id bashShell</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">0f3c557a8105   centos    &quot;/bin/sh -c &#x27;while t…&quot;   3 hours ago   Up 3 hours             nervous_colden</span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it 0f3c557a8105 /bin/bash</span><br><span class="line">[root@0f3c557a8105 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 09:17 ?        00:00:02 /bin/sh -c while true;do echo cjsong;sleep 1;done</span><br><span class="line">root      9802     0  0 12:01 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      9823     1  0 12:01 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/s</span><br><span class="line">root      9824  9802  0 12:01 pts/0    00:00:00 ps -ef</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker attach 0f3c557a8105</span><br><span class="line">正在执行当前的代码。。。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span>  进入容器后开启一个新的终端，可以在里面操作（常用）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker attach  进入容器正在执行的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure>

<p><strong>从容器内拷贝文件到主机上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器id：容器内路径 目的的主机路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前主机目录下</span></span><br><span class="line">[root@VM-24-12-centos home]# ls</span><br><span class="line">lighthouse</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入docker容器内部</span></span><br><span class="line">[root@VM-24-12-centos home]# docker exec -it 0f3c557a8105 /bin/bash</span><br><span class="line">[root@0f3c557a8105 /]# cd /home</span><br><span class="line">[root@0f3c557a8105 home]# ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内新建一个文件</span></span><br><span class="line">[root@0f3c557a8105 home]# touch test.py</span><br><span class="line">[root@0f3c557a8105 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@VM-24-12-centos home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">0f3c557a8105   centos    &quot;/bin/sh -c &#x27;while t…&quot;   3 hours ago   Up 3 hours             nervous_colden</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件拷贝出来到主机上</span></span><br><span class="line">[root@VM-24-12-centos home]# docker cp 0f3c557a8105:/home/test.py /home</span><br><span class="line">[root@VM-24-12-centos home]# ls</span><br><span class="line">lighthouse  test.py</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用-v卷的技术，可以实现</span></span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/docker-base/6.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach	Attach to a running container                        # 当前shel1 attach 连接指足运行镜像</span><br><span class="line">build	Build an image from a Dockerfile                     # 通过Dockerfile定制镜像</span><br><span class="line">commit	Create a new image from a container changes          # 提交当前容器为新的镜像</span><br><span class="line">cp		Copy files/Folders from the containers filesystem to the host path  # 从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create	Create a new container                               # 创建一个新的容器,同run，但不启动容器</span><br><span class="line">diff	Inspect changes on a container&#x27;s filesystem          # 查看docker容器变化</span><br><span class="line">events	Get real time events from the server                 # 从docker服务获取容器实时事件</span><br><span class="line">exec	Run a command in an existing container               # 在已存在的容器上运行命令</span><br><span class="line">export	Stream the contents of a container as a tar archive  # 导出容器的内容流作为一个 tar归档文件[对应import]</span><br><span class="line">history	Show the history of an image                         # 展示一个镜像形成历史</span><br><span class="line">images	List images                                          # 列出系统当前镜像</span><br><span class="line">import	Create a new filesystem image from the contents of a tarball  # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info	Display system-wide information                      # 显示系统相关信息</span><br><span class="line">inspect	Return low-1evel information on a container          # 查看容器详细信息</span><br><span class="line">ki1l	Ki11 a running container                             # ki1l指定docker容器</span><br><span class="line">1oad	Load an image from a tar archive                     # 从一个tar包中加载一个镜像[对应save]</span><br><span class="line">login	Register or Login to the docker registry server      # 注册或者登陆一个docker源服务器</span><br><span class="line">logout	Log out from a Docker registry server                # 从当前Docker registry退出</span><br><span class="line">logs	Fetch the logs of a container                        # 输出当前容器日志信息</span><br><span class="line">port	Lookup the public-facing port which is NAT-ed to PRIVATE_PORT  # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause	Pause all processes within a container               # 暂停容器</span><br><span class="line">ps		List containers                                      # 列出容器列表</span><br><span class="line">pu11	Pull an image or a repository from the docker registry server  # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push	Push an image or a repository to the docker registry server  # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart	Restart a running container                          # 重启运行的容器</span><br><span class="line">rm		Remove one or more containers                        # 移除一个或者多个容器</span><br><span class="line">rmi		Remove one or more images  # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制册除]</span><br><span class="line">run		Run a command in a new container                     # 创建一个新的容器并运行―个命令</span><br><span class="line">save	Save an image to a tar archive                       # 保存一个镜像为一个:tar 包[对应1oad]</span><br><span class="line">search	Search for an image on the Docker Hub                # 在docker hub中搜索镜像</span><br><span class="line">start	Start a stopped containers                           # 启动容器</span><br><span class="line">stop	Stop a running containers                            # 停止容器</span><br><span class="line">tag		Tag an image into a repository                       # 给源中镜像打标签</span><br><span class="line">top		Lookup the running processes of a container          # 查看容器中运行的进程信息</span><br><span class="line">unpause	Unpause a paused container                           # 取消暂停容器</span><br><span class="line">version	Show the docker version information                  # 查看docker版本号</span><br><span class="line">wait	Block until a container stops，then print its exit code  # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>

<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul>
<li>portainer</li>
<li>Rancher</li>
</ul>
<p><strong>什么是portainer</strong></p>
<p>Docker图形化界面管理工具，提供一个后台面板提供我们操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure>

<p>安装后，通过外网地址:8088就可以访问了</p>
<p>可视化面板平时不会使用，测试玩玩即可！</p>
<h1 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。<br>所有的应用，直接打包docker镜像，就可以直接跑起来!</p>
<p><strong>如何得到镜像:</strong></p>
<ul>
<li>从远程仓库下载朋友拷贝给你</li>
<li>自己制作—个镜像DockerFile</li>
</ul>
<h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote>
<p>UnionFS（联合文件系统）</p>
</blockquote>
<p>UnionFS (联合文件系统）: Union文件系统( UnionFS ) 是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual file system)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p>特性:一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<blockquote>
<p>Docker镜像加载原理</p>
</blockquote>
<p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p>
<p>bootfs(bot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p>rootfs (root file system)，在bootfs之上。包含的就是典型Linux系统中的/dev, /proc, /bin, /letc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu , Centos等等。</p>
<p><img src="/docker-base/7.jpg"></p>
<p>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M ?</p>
<p>对于一个精简的Os , rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别,因此不同的发行版可以公用bootfs。</p>
<h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commint  提交容器成为一个新的副本</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot;  容器id 目标镜像名：[TAG]</span><br></pre></td></tr></table></figure>

<p><strong>实战测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动一个默认的Tomcat</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现这个默认的Tomcat是没有webapps应用，镜像的原因，官方的镜像默认webapps下面是没有文件的</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自己拷贝进去基本的文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交镜像</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker commit -a=&quot;cjsong&quot; -m=&quot;add webapps app&quot; 34232a0abc7b tomcat01:1.0</span><br><span class="line">0sha256:340e80fe4d77ca0cb32bb1852560d616cb850a9b924ad544edd5a4e4c7fbd055</span><br><span class="line">[root@VM-24-12-centos ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">tomcat01              1.0       340e80fe4d77   21 seconds ago   684MB</span><br><span class="line">nginx                 latest    605c77e624dd   11 days ago      141MB</span><br><span class="line">tomcat                9.0       b8e65a4d736d   2 weeks ago      680MB</span><br><span class="line">tomcat                latest    fb5657adc892   2 weeks ago      680MB</span><br></pre></td></tr></table></figure>

<p>这里就算入门Docker了！</p>
<p>以下章节是Docker的精髓！</p>
<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker的理念：</strong>将应用和环境打包成一个镜像</p>
<p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！==需求：数据额可持续化==</p>
<p>MySQL，容器删了，删库跑路！==需求：MySQL数据可以存放在本地==</p>
<p>容器之间可以有一个数据共享的技术，Docker容器产生的数据，同步到本地</p>
<p>这就是卷技术，目录的挂载，将我们的容器内的目录挂载到Linux上</p>
<p><img src="/docker-base/8.jpg"></p>
<p><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的</strong></p>
<h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote>
<p>方式一：直接使用命令来挂载 -v</p>
</blockquote>
<p><img src="/docker-base/10.jpg" alt="10"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动起来后可以通过docker inspect 容器id</span></span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/9.jpg"></p>
<p>测试文件的同步</p>
<p><img src="/docker-base/10.jpg"></p>
<p>再测试：</p>
<p>停止容器，在宿主机上修改文件，启动容器，容器内的数据依旧是同步的</p>
<p>可以理解为映射！</p>
<p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p>
<h2 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h2><p>思考：MySQL数据持久化的问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取镜像</span></span><br><span class="line">[root@VM-24-12-centos /]# docker pull mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器，需要做数据挂载  <span class="comment"># 注意：安装启动mysql，需要配置密码</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方测试：docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql：tag</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动我们的mysql容器</span></span><br><span class="line">-d 后台信息</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line">[root@VM-24-12-centos /]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功之后，我们在本地使用sqlyog来测试连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sqlyog-连接到服务器的3310 --- 3310和容器内的3306映射，这个时候我们就可以连接上了</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在本地测试创建一个数据库，查看一下我们映射的路径是否ok！</span></span><br></pre></td></tr></table></figure>

<p>我们将mysql容器删除，我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能</p>
<h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的volume的情况</span></span><br><span class="line">[root@VM-24-12-centos home]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     16014f9579f5636bb71e4d427db32f3eafb95f1e2d9cf11e4c405ecee273dc8c</span><br><span class="line">local     fdc4ea0787124d820de9c4d504bbfc087ec568802c4ae952e36f2fee48e12183</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现，这种就是匿名挂载，我们在-v只写了容器</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">[root@VM-24-12-centos home]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">598a15e9ea392222cd6c8bbf6b2cdc11f9d4775a57150ec2fcbb685c41967fa3</span><br><span class="line">[root@VM-24-12-centos home]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     16014f9579f5636bb71e4d427db32f3eafb95f1e2d9cf11e4c405ecee273dc8c</span><br><span class="line">local     fdc4ea0787124d820de9c4d504bbfc087ec568802c4ae952e36f2fee48e12183</span><br><span class="line">local     juming-nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过-v 卷面：容器内路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一下这个卷</span></span><br><span class="line">[root@VM-24-12-centos home]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2022-01-10T21:07:15+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>所有的docker容器内的卷，没有指定目录的情况下都是在**/var/lib/docker/volumes/xxxx/_data**<br>我们通过具名挂载可以方便找到我们的一个卷，大多数情况下使用的是<strong>具名挂载</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如何确定是具名挂载还是匿名挂载，还是指定路径挂载</span></span><br><span class="line">-v  容器内路径             # 匿名挂载</span><br><span class="line">-v  卷名:容器内路径         # 具名挂载</span><br><span class="line">-v  /宿主机路径::容器内路径  # 指定路径挂载</span><br></pre></td></tr></table></figure>

<p>扩展：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径：ro rw 改变读写权限</span></span><br><span class="line">ro  readonly   # 只读</span><br><span class="line">rw  readwrite  # 可读可写</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦设置了容器权限，容器对我们挂载出来的内容就有限定了</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro  nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw  nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro只要看到ro就说明这个路径只能通过宿主机来操作，容器内就是无法操作</span></span><br></pre></td></tr></table></figure>



<h2 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h2><p>Dockerfile就是用来构建docker镜像的构建文件，命令脚本。</p>
<p>通过脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个dockerfile文件，名字可以随机 建议 Dockerfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件中的内容 指令（大写） 参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的每个命令，就是镜像的一层</span></span><br><span class="line">[root@VM-24-12-centos docker-test-volume]# pwd</span><br><span class="line">/home/docker-test-volume</span><br><span class="line">[root@VM-24-12-centos docker-test-volume]# vim dockerfile1</span><br><span class="line">[root@VM-24-12-centos docker-test-volume]# cat dockerfile1 </span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line">[root@VM-24-12-centos docker-test-volume]# docker build -f dockerfile1 -t cjsong/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5d0da3dc9764</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 530b2d93f754</span></span><br><span class="line">Removing intermediate container 530b2d93f754</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 9d8126e3d119</span></span><br><span class="line">Step 3/4 : CMD echo &quot;-----end-----&quot;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 02ca258a0415</span></span><br><span class="line">Removing intermediate container 02ca258a0415</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 51b222329824</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> a53427c2f2fb</span></span><br><span class="line">Removing intermediate container a53427c2f2fb</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 17c7b7128830</span></span><br><span class="line">Successfully built 17c7b7128830</span><br><span class="line">Successfully tagged cjsong/centos:1.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动自己写的容器</span></span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/11.jpg"></p>
<p>这个卷和外部一定有一个同步的目录</p>
<p><img src="/docker-base/12.jpg"></p>
<p>查看一下卷挂载的路径</p>
<p><img src="/docker-base/13.jpg"></p>
<p>测试一下刚才的文件是否同步出去了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos docker-test-volume]# cd /var/lib/docker/volumes/b9c329c7d0847132b4059231f559694f2060bd2b7e3bafd2e2363573c5f15b88/_data</span><br><span class="line">[root@VM-24-12-centos _data]# ls</span><br><span class="line">container.txt</span><br><span class="line">[root@VM-24-12-centos _data]# </span><br></pre></td></tr></table></figure>

<p>这种方式我们未来使用的十分多，因为我们通常会构建自己的镜像</p>
<p>假设构建镜像时没有挂载卷，要手动镜像挂载 -v 卷名：容器内路径</p>
<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>两个mysql同步数据</p>
<p><img src="/docker-base/14.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动3个容器，通过我们刚才自己写的镜像启动</span></span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/15.jpg"></p>
<p><img src="/docker-base/16.jpg"></p>
<p>只要通过–volume-from，我们就可以容器间的数据共享了</p>
<p>父容器删了也不影响子容器的数据</p>
<p>多个mysql实现数据共享</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos /]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@VM-24-12-centos /]# docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volume-from mysql01 mysql:5.7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个时候，可以实现两个容器数据同步</span></span><br></pre></td></tr></table></figure>



<p><strong>结论</strong></p>
<p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p>
<p>但是一旦持久化到了本地，这个时候，本地的数据是不会删除的</p>
<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><p>dockerfile是用来构建docker镜像的文件，命令参数脚本</p>
<p>构建步骤：</p>
<ol>
<li>编写一个dockerfile文件</li>
<li>docker build 构建成为一个镜像</li>
<li>docker run 运行镜像</li>
<li>docker push 发布镜像（DockerHub、阿里云镜像仓库）</li>
</ol>
<h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p><strong>基础知识：</strong></p>
<ol>
<li>每个保留关键字（指令）都必须是大写字母</li>
<li>执行从上到下顺序执行</li>
<li>#表示注释</li>
<li>每一个指令都会创建提交一个新的镜像层，并提交</li>
</ol>
<p><img src="/docker-base/17.jpg"></p>
<p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单</p>
<p>Docker镜像逐渐成为企业交付的标准，必须要掌握</p>
<p>DockerFile：构建文件，定义了一切的步骤，源代码</p>
<p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行的产品</p>
<p>Docker容器：容器就是镜像运行起来提供服务器</p>
<h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM          # 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER    # 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN           # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD           # 步骤：Tomcat镜像，这个Tomcat压缩包，添加内容</span><br><span class="line">WORKDIR       # 镜像的工作目录</span><br><span class="line">VOLUME        # 挂载的目录</span><br><span class="line">EXPOST        # 暴露端口配置</span><br><span class="line">CMD           # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT    # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD       # 当构建一个被继承DockerFile这个时候就会运行ONBUILD的指令。触发指令。</span><br><span class="line">COPY          # 类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV           # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/18.jpg"></p>
<p>以前都是使用别人的镜像，有了这些指令后，我们可以自己写一个镜像。</p>
<h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub中99%镜像都是从这个基础镜像过来的 FROM scratch，然后配置需要的软件来进行的构建</p>
<p><img src="/docker-base/19.jpg"></p>
<blockquote>
<p>创建一个自己的centos</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、编写Dockerfile文件</span></span><br><span class="line">[root@VM-24-12-centos dockerfile]# cat mydockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER codeChen&lt;735709343@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令docker build -f dockerfile文件路径 -t 镜像名:[tag]</span></span><br><span class="line">Successfully built 7a26a1ca5051</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、测试运行</span></span><br></pre></td></tr></table></figure>

<p>我们可以列出本地进行的变更历史</p>
<p><img src="/docker-base/20.jpg"></p>
<p>我们可以根据history研究一下镜像是怎么做的</p>
<blockquote>
<p>CMD 和 ENTRYPOINT区别</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMD           # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT    # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure>

<p>测试CMD</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写Dockerfile文件</span></span><br><span class="line">[root@VM-24-12-centos dockerfile]# vim dockerfile-cmd-test</span><br><span class="line">[root@VM-24-12-centos dockerfile]# cat dockerfile-cmd-test </span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@VM-24-12-centos dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5d0da3dc9764</span></span><br><span class="line">Step 2/2 : CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 798fb44a5a98</span></span><br><span class="line">Removing intermediate container 798fb44a5a98</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> dd5e2ef6c441</span></span><br><span class="line">Successfully built dd5e2ef6c441</span><br><span class="line">Successfully tagged cmdtest:latest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> run运行，发现ls -a 命令运行成功</span></span><br><span class="line">[root@VM-24-12-centos dockerfile]# docker run dd5e2ef6c441</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令 -l   ls -al</span></span><br><span class="line">[root@VM-24-12-centos dockerfile]# docker run dd5e2ef6c441 -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的情况下 -l 替换了CMD[<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]命令，-l不是命令所以报错</span></span><br></pre></td></tr></table></figure>

<p>测试ENTRYPOINT</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos dockerfile]# vim dockerfile-entrypoint-test</span><br><span class="line">[root@VM-24-12-centos dockerfile]# cat dockerfile-entrypoint-test </span><br><span class="line">FROM centos</span><br><span class="line">EMTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"></span><br><span class="line">[root@VM-24-12-centos dockerfile]# docker build -f dockerfile-entrypoint-test -t entrypoint-test .</span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5d0da3dc9764</span></span><br><span class="line">Step 2/2 : ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> de769740d0d0</span></span><br><span class="line">Removing intermediate container de769740d0d0</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> ea54c2dc6a5f</span></span><br><span class="line">Successfully built ea54c2dc6a5f</span><br><span class="line">Successfully tagged entrypoint-test:latest</span><br><span class="line">[root@VM-24-12-centos dockerfile]# docker run ea54c2dc6a5f</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 追加命令是直接拼接在我们的ENTRYPOINT命令后面</span></span><br><span class="line">[root@VM-24-12-centos dockerfile]# docker run ea54c2dc6a5f -l</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan 14 06:54 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan 14 06:54 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 Jan 14 06:54 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 Jan 14 06:54 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan 14 06:54 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Sep 15 14:17 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 120 root root    0 Jan 14 06:54 proc</span><br><span class="line">dr-xr-x---   2 root root 4096 Sep 15 14:17 root</span><br><span class="line">drwxr-xr-x  11 root root 4096 Sep 15 14:17 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root    0 Jan 11 12:42 sys</span><br><span class="line">drwxrwxrwt   7 root root 4096 Sep 15 14:17 tmp</span><br><span class="line">drwxr-xr-x  12 root root 4096 Sep 15 14:17 usr</span><br><span class="line">drwxr-xr-x  20 root root 4096 Sep 15 14:17 var</span><br></pre></td></tr></table></figure>

<p>Dockerfile中很多命令偶读十分相似，我们需要了解它们的区别。</p>
<h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><ol>
<li><p>准备镜像文件Tomcat压缩包，jdk压缩包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos tomcat]# ll</span><br><span class="line">total 84016</span><br><span class="line">-rw-r--r-- 1 root root 11582777 Jan 14 21:50 apache-tomcat-9.0.56.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 74444709 Jan 14 21:50 jdk-8u311-linux-aarch64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>编写dockerfile文件，官方命名<strong>Dockerfile</strong>，build会自动寻找这个文件，就不需要-f指定了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Dockerfile文件</span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER CodeChen&lt;735709343@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u311-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.56.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_311</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.56</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.56</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.56/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.56/bin/logs/catalina.out</span><br></pre></td></tr></table></figure></li>
<li><p>构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build</span></span><br><span class="line">[root@VM-24-12-centos tomcat]# docker build -t diytomcat .</span><br></pre></td></tr></table></figure></li>
<li><p>启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos tomcat]# docker run -d -p 9090:8080 --name CodeChenTomcat -v /home/CodeChen/build/tomcat/test:/usr/local/apache-tomcat-9.0.56/webapps/test -v /home/CodeChen/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.56/logs diytomcat</span><br></pre></td></tr></table></figure></li>
<li><p>访问测试</p>
</li>
<li><p>发布项目（由于做了卷挂载，我们直接在本地编写项目发布了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;CodeChen&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello World!&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">System.out.println(<span class="string">&quot;-----my test web logs-----&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote>
<p>DockerHub</p>
</blockquote>
<ol>
<li><p><a href="https://hub.docker.com/">https://hub.docker.com/</a>   注册自己的账号</p>
</li>
<li><p>确定这个账号可以登录</p>
</li>
<li><p>在我们服务器上提交自己的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos ~]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>登录后就可以提交镜像</p>
</li>
<li><p>提交镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 现将镜像的TAG改名，必须带dockerHub的账面名</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker tag 844c55be72a6 账号名/tomcat:1.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交镜像</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker push 账号名/tomcat:1.0</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>阿里云镜像服务上</p>
</blockquote>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="/docker-base/21.jpg"></p>
<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h2><p>清空所有环境</p>
<blockquote>
<p>测试</p>
</blockquote>
<p><img src="/docker-base/22.jpg"></p>
<p>三个网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 问题：docker 是如何处理容器网络访问的？</span></span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/23.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">[root@VM-24-12-centos ~]<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器内部网络地址 ip addr， 发现容器启动的时候会得到一个eth0@if262 ip地址，docker分配的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有ip指令的，进入容器执行apt update &amp;&amp; apt install -y iproute2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ping指令apt update &amp;&amp; apt install -y inetutils-ping</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">70: eth0@if71: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 思考，Linux能不能ping通容器内部</span></span><br><span class="line">[root@VM-24-12-centos ~]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.054 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.053 ms</span><br><span class="line">^C</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以ping通</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>原理</p>
</blockquote>
<ol>
<li><p>我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要安装了docker，就会有一个网卡docker0</p>
<p>桥接模式，使用的技术是veth-pair技术</p>
<p>再次测试ip addr</p>
<p><img src="/docker-base/24.jpg"></p>
</li>
<li><p>再启动一个容器测试，发现又多了一对网卡</p>
<p><img src="/docker-base/25.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 我们发现这些容器带来的网卡，都是一对一对的</span><br><span class="line"># veth-pair 就是一对虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相邻</span><br><span class="line"># 正因为有这个特性，veth-pair充电一个桥梁，连着各种虚拟网络设备的</span><br><span class="line"># Openstac，Docker容器之间的连接，OVS的连接，都是使用veth-pair技术</span><br></pre></td></tr></table></figure></li>
<li><p>我们来测试 tomcat01 和 tomcat02</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat02 ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.139 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.068 ms</span><br><span class="line">^C</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结论：容器和容器间是可以互相ping通的</span></span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/26.jpg"></p>
</li>
</ol>
<p>结论：tomcat01和tomcat02是共用的一个路由器，docker0</p>
<p>所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用IP</p>
<blockquote>
<p>小结</p>
</blockquote>
<p>Docker使用的是Linux的桥接，宿主机中的一个Docker容器的网络 docker0</p>
<p><img src="/docker-base/27.jpg"></p>
<p>​                Docker中所有的网络接口都是虚拟的。虚拟的转发效率高（内网传递文件）</p>
<p>​                只要容器删除，对应的网桥一堆就没了</p>
<h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><blockquote>
<p>思考一个场景，我们编写一个微服务，database url=ip:，项目部重启，数据库ip换掉了，我们希望可以处理这个问题，可以名字来进行访问容器？</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat02 ping docker01</span><br><span class="line">ping: docker01: Name or service not known</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如何解决这个问题？</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat02 ping tomcat01</span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过--link就可以解决</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br><span class="line">40f1831102ec395d004511311d4929d51ac2f6c0b2b74660795ed475c182d951</span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat03 ping tomcat02</span><br><span class="line">PING tomcat02 (172.17.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=0 ttl=64 time=0.107 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.087 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.081 ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反向可以ping通吗？</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat02 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure>

<p>探索：inspect！</p>
<p><img src="/docker-base/28.jpg"></p>
<p>其实这个tomcat03就是在本地配置了tomcat02的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看hosts配置，在这里可以发现</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">::1	localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0	ip6-localnet</span><br><span class="line">ff00::0	ip6-mcastprefix</span><br><span class="line">ff02::1	ip6-allnodes</span><br><span class="line">ff02::2	ip6-allrouters</span><br><span class="line">172.17.0.3	tomcat02 5127a5a11c80</span><br><span class="line">172.17.0.4	40f1831102ec</span><br></pre></td></tr></table></figure>

<p>本质探索：–link就是我们在hosts配置中增加了一个172.17.0.3    tomcat02 5127a5a11c80</p>
<p><strong>不建议使用–link</strong></p>
<p>自定义网络，不适用docker0</p>
<p>docker0问题：它不支持容器名连接访问</p>
<h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote>
<p>查看所有的docker网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">9015d2de5076   bridge    bridge    local</span><br><span class="line">d424bc564388   host      host      local</span><br><span class="line">c05e1cec9830   none      null      local</span><br></pre></td></tr></table></figure>

<p><strong>网络模式</strong></p>
<p>bridge：桥接docker（默认）</p>
<p>none：不配置网络</p>
<p>host：和宿主机共享网络</p>
<p>container：容器网络连通（用得少，局限性大）</p>
<p><strong>测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们直接启动的命令 --net bridge。而这个就是我们的docker0</span></span><br><span class="line">docker run -d -P --name tomcat01 tomcat</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0特点：默认，域名不能访问， --link可以打通连接</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们可以自定义一个网络</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">d52c8dfc3f43e3093db8fac8610a6bfcb730dc94130f348b35e6a8c724063bfd</span><br><span class="line">[root@VM-24-12-centos ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">9015d2de5076   bridge    bridge    local</span><br><span class="line">d424bc564388   host      host      local</span><br><span class="line">d52c8dfc3f43   mynet     bridge    local</span><br><span class="line">c05e1cec9830   none      null      local</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们自己的网络就创建好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-24-12-centos ~]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;d52c8dfc3f43e3093db8fac8610a6bfcb730dc94130f348b35e6a8c724063bfd&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-01-15T19:26:58.202086579+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;6c2933400d5f7a2cb89576102cc1a3a32de688fc49606025cc21ef5229995f80&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;14d101d7465b1befcac43d3ff4a23b0aaaed71684cde4e6e869093bd9475a9e3&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;8649eb40b3e4aa6de2feab6898d15783b9946b76a802782b3bbdaef1a27a5f03&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;c0fcc13bee04c3cb60f5ddc8a2d933ebce2ce694a71cf07e2c588b284ce974d1&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次测试</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat-net-01 ping 192.168.0.3</span><br><span class="line">PING 192.168.0.3 (192.168.0.3): 56 data bytes</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=0 ttl=64 time=0.101 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.073 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.083 ms</span><br><span class="line">^C--- 192.168.0.3 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.073/0.086/0.101/0.000 ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 现在不使用--link也可以ping名字了</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat-net-01 ping tomcat-net-02</span><br><span class="line">PING tomcat-net-02 (192.168.0.3): 56 data bytes</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=0 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.093 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.083 ms</span><br><span class="line">^C--- tomcat-net-02 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.080/0.085/0.093/0.000 ms</span><br></pre></td></tr></table></figure>

<p>自定义的网络docker都已经帮我们维护好了对应的关系，推荐我们平时这样使用网络</p>
<p>好处：</p>
<p>redis - 不同的集群使用不用的网络，保证集群是安全和健康的</p>
<p>mysql - 不同的集群使用不同的网络，保证集群是安全和健康的</p>
<h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p><img src="/docker-base/29.jpg"></p>
<p><img src="/docker-base/30.jpg" alt="30"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试打通 tomcat01 --mynet</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连通之后就是将 tomcat01 放到了 mynet 网络下</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个容器两个ip地址</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里云服务 公网ip 私网ip</span></span><br></pre></td></tr></table></figure>

<p><img src="/docker-base/31.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">![32](D:\Learning\PersonalBlog\CodeChenBlog\source\_posts\docker-base\32.jpg)# tomcat01可以ping成功了</span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat01 ping tomcat-net-01</span><br><span class="line">PING tomcat-net-01 (192.168.0.2): 56 data bytes</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=0 ttl=64 time=0.089 ms</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=1 ttl=64 time=0.085 ms</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=2 ttl=64 time=0.099 ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat02没有打通</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker exec -it tomcat02 ping tomcat-net-01</span><br><span class="line">ping: unknown host</span><br></pre></td></tr></table></figure>



<p>结论：假设要跨网络操作别人，就需要使用docker network connect 连通</p>
<h2 id="实战：部署Redis集群"><a href="#实战：部署Redis集群" class="headerlink" title="实战：部署Redis集群"></a>实战：部署Redis集群</h2><p><img src="/docker-base/32.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">[root@VM-24-12-centos ~]# docker network create redis --subnet 172.38.0.0/16</span><br><span class="line">884ebcd83c61febde438596b1edfb53c7df22b814be5eb4c3b67db2b594b9caa</span><br><span class="line">[root@VM-24-12-centos ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">9015d2de5076   bridge    bridge    local</span><br><span class="line">d424bc564388   host      host      local</span><br><span class="line">d52c8dfc3f43   mynet     bridge    local</span><br><span class="line">c05e1cec9830   none      null      local</span><br><span class="line">884ebcd83c61   redis     bridge    local</span><br><span class="line">[root@VM-24-12-centos ~]# </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf; \</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个一个的启动</span></span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 \</span><br><span class="line">-v /mydata/redis/node-6/data:/data \</span><br><span class="line">-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建集群</span></span><br><span class="line">[root@VM-24-12-centos redis]# docker exec -it redis-1 /bin/sh</span><br><span class="line">/data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cl</span><br><span class="line">uster-replicas 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span><br><span class="line">Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span><br><span class="line">Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span><br><span class="line">M: 7974a0d896bc29eb2c3327e1323ea57690636813 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 717715dd5d6410d67f5409a62fda87c57cdd9442 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 1cebf3078d1560ab9e2de241f395912b8d1864cd 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 44017ab43f38cc76c48b583709069fa03c4acb5e 172.38.0.14:6379</span><br><span class="line">   replicates 1cebf3078d1560ab9e2de241f395912b8d1864cd</span><br><span class="line">S: 90d32dcaa9a977c61bcdb6f85186b1831f782286 172.38.0.15:6379</span><br><span class="line">   replicates 7974a0d896bc29eb2c3327e1323ea57690636813</span><br><span class="line">S: 8059c7709198db5c32c9153c0a9eb3601023ef6b 172.38.0.16:6379</span><br><span class="line">   replicates 717715dd5d6410d67f5409a62fda87c57cdd9442</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span></span><br><span class="line">M: 7974a0d896bc29eb2c3327e1323ea57690636813 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 717715dd5d6410d67f5409a62fda87c57cdd9442 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 44017ab43f38cc76c48b583709069fa03c4acb5e 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 1cebf3078d1560ab9e2de241f395912b8d1864cd</span><br><span class="line">S: 8059c7709198db5c32c9153c0a9eb3601023ef6b 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 717715dd5d6410d67f5409a62fda87c57cdd9442</span><br><span class="line">S: 90d32dcaa9a977c61bcdb6f85186b1831f782286 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 7974a0d896bc29eb2c3327e1323ea57690636813</span><br><span class="line">M: 1cebf3078d1560ab9e2de241f395912b8d1864cd 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<p>docker搭建redis集群完成</p>
<p><img src="/docker-base/33.jpg"></p>
<p>使用docker之后，所有的技术都会慢慢的变得简单起来！</p>
<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h1 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h1><h1 id="CI-CD之Jenkins"><a href="#CI-CD之Jenkins" class="headerlink" title="CI/CD之Jenkins"></a>CI/CD之Jenkins</h1><p>资料来源于狂神讲Docker教学视频。</p>
<p><a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=40&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1og4y1q7M4?p=40&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>os-base</title>
    <url>/os-base/</url>
    <content><![CDATA[<h1>概述</h1>
<blockquote>
<p>现代计算机系统由一个或多个处理器、主存、键盘、鼠标、显示器以及各种输入输出设备构成。</p>
<p>操作系统：在硬件的基础之上，计算机安装了一层软件，这层软件就称之为操作系统，它能够通过响应用户的指令来控制硬件，程序员可以不用直接和硬件打交道。我们常用的通讯软件、办公软件等软件都是建立在操作系统之上。</p>
<p>我们常见的操作系统主要有Windows、Linux、macOS等等。</p>
</blockquote>
<p><img src="/./os-base/1.jpg" alt></p>
<h1>计算机硬件简介</h1>
<blockquote>
<ol>
<li>CPU
<ul>
<li>CPU 是计算机的大脑，它主要和内存进行交互，从内存中提取指令并执行它。</li>
</ul>
</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>-操作系统</tag>
      </tags>
  </entry>
</search>
