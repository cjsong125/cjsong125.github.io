<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法题（数组篇）</title>
    <url>/algo-array/</url>
    <content><![CDATA[<h1>1、简介</h1>
<blockquote>
<p>分类刷算法题（语言：java）：</p>
<p>​	博主将陆续按分类顺序发布力扣算法题的解析与代码。部分代码参考力扣解析，仅供参考，如有疑问，评论探讨。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>数组篇：</strong></p>
<p>遇到不会的排序试试</p>
<p>正向走不通反向思考</p>
</blockquote>
<h1>2、例题推荐</h1>
<h2 id="2-1、数组的遍历">2.1、数组的遍历</h2>
<h3 id="485-最大连续-1-的个数">485. 最大连续 1 的个数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210830193615584.png" alt="image-20210830193615584"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;  <span class="comment">//数组长度</span></span><br><span class="line">        <span class="keyword">int</span> cur_num = <span class="number">0</span>;  <span class="comment">//当前1的数量</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;  <span class="comment">//最大连续1的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;  <span class="comment">//循环遍历数组元素</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;  <span class="comment">//当前元素为0时，将当前记录1的数量设为0</span></span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="comment">//当前元素为1的情况</span></span><br><span class="line">                index++; </span><br><span class="line">                <span class="keyword">if</span> (index &gt; max)&#123;  <span class="comment">//每次都与最大值比较，当前1的数量大于max，就赋值给max</span></span><br><span class="line">                    max = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210831150555050.png" alt="image-20210831150555050"></p>
<h3 id="495-提莫攻击">495.提莫攻击</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210831150232735.png" alt="image-20210831150232735"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPoisonedDuration</span><span class="params">(<span class="keyword">int</span>[] timeSeries, <span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> poisoning_time = <span class="number">0</span>;  <span class="comment">//中毒时间</span></span><br><span class="line">        <span class="keyword">if</span> (timeSeries..length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> duration;  <span class="comment">//如果数组只有一个数据，相当于攻击一次，就直接返回持续时间即可</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; timeSeries..length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == timeSeries..length-<span class="number">1</span>) &#123;</span><br><span class="line">                poisoning_time += duration;  <span class="comment">//最后一次攻击，直接把中毒时间加上持续时间</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (timeSeries[i+<span class="number">1</span>] - timeSeries[i] &gt;= duration)&#123;  <span class="comment">//两次攻击时间大于持续时间</span></span><br><span class="line">                	poisoning_time += duration;</span><br><span class="line">            	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                	poisoning_time += timeSeries[i+<span class="number">1</span>] - timeSeries[i];  <span class="comment">//两次攻击时间小于持续时间，直接加上时间差</span></span><br><span class="line">            	&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> poisoning_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210831150324274.png" alt="image-20210831150324274"></p>
<h3 id="414-第三大的数">414.第三大的数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210831214906271.png" alt="image-20210831214906271"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len  = nums..length;  <span class="comment">//数组长度</span></span><br><span class="line">        <span class="keyword">long</span> first, second, third;</span><br><span class="line">        first = second = third = Long..MIN_VALUE;  <span class="comment">//定义前三的数字</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math..max(nums[<span class="number">0</span>], nums[len - <span class="number">1</span>]);  <span class="comment">//数组长度不足3，直接返回最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (cur == first || cur == second) &#123;  </span><br><span class="line">                <span class="keyword">continue</span>;  <span class="comment">//重复数值直接跳过</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; first) &#123;  <span class="comment">//当前值大于最大值，重新给一二三赋值</span></span><br><span class="line">                third = second;</span><br><span class="line">                second = first;</span><br><span class="line">                first = cur;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; second) &#123;  <span class="comment">//当前值大于第二大的值，重新给二三赋值</span></span><br><span class="line">                third = second;</span><br><span class="line">                second = cur;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; third) &#123;  <span class="comment">//当前值大于第三大的值，重新给三赋值</span></span><br><span class="line">                third = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> third == Long..MIN_VALUE ? (<span class="keyword">int</span>)first : (<span class="keyword">int</span>)third;  <span class="comment">//第三的值有改动就返回改动后的值，如果还是初始化的MIN_VALUE就返回最大值</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210831214956357.png" alt="image-20210831214956357"></p>
<h3 id="628-三个数的最大乘积">628.三个数的最大乘积</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210901133222070.png" alt="image-20210901133222070"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays..sort(nums);</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">if</span> (nums[len-<span class="number">1</span>] * nums[len-<span class="number">2</span>] * nums[len-<span class="number">3</span>] &gt; nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[len-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> nums[len-<span class="number">1</span>] * nums[len-<span class="number">2</span>] * nums[len-<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[len-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210901133310490.png" alt="image-20210901133310490"></p>
<h2 id="2-2、统计数组中的元素">2.2、统计数组中的元素</h2>
<h3 id="645-错误的集合">645.错误的集合</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210902164136576.png" alt="image-20210902164136576"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findErrorNums(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] cnts = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) cnts[x]++;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnts[i] == <span class="number">0</span>) ans[<span class="number">1</span>] = i;</span><br><span class="line">            <span class="keyword">if</span> (cnts[i] == <span class="number">2</span>) ans[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210902164312092.png" alt="image-20210902164312092"></p>
<h3 id="697-数组的度">697.数组的度</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210903143930144.png" alt="image-20210903143930144"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">50009</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findShortestSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[N];  <span class="comment">//存放每个数字出现在的次数</span></span><br><span class="line">        <span class="keyword">int</span>[] first = <span class="keyword">new</span> <span class="keyword">int</span>[N], last = <span class="keyword">new</span> <span class="keyword">int</span>[N];  <span class="comment">//记录每个数字的第一次出现的位置和最后出现的位置</span></span><br><span class="line">        Arrays..fill(first, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = nums[i];</span><br><span class="line">            max = Math..max(max, ++cnt[t]);  <span class="comment">//遍历得到最大的度</span></span><br><span class="line">            <span class="keyword">if</span> (first[t] == -<span class="number">1</span>) first[t] = i;  <span class="comment">//记录第一次出现的位置</span></span><br><span class="line">            last[t] = i;  <span class="comment">//记录最后出现的位置；</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = Integer..MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (cnt[t] == max) ans = Math..min(ans, last[t] - first[t] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210903144025429.png" alt="image-20210903144025429"></p>
<h3 id="448-找到所有数组中消失的数字">448.找到所有数组中消失的数字</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210904155753264.png" alt="image-20210904155753264"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组记录法，需要额外数组记录数值是否出现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] cnts = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];  <span class="comment">//建立数组记录数值的出现</span></span><br><span class="line">        Arrays..fill(cnts, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) cnts[n]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cnts[i] == <span class="number">0</span>) result..add(i);  <span class="comment">//cnts[i]==0说明没有出现当前数值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210904155720339.png" alt="image-20210904155720339"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//哈希记录，在原数组进行记录，不实用额外空间</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lenn = nums..length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = (num - <span class="number">1</span>) % len;  <span class="comment">// 原数组坐标是0-(len-1)，所以需要num-1；对数组长度取余</span></span><br><span class="line">            nums[x] += len;  <span class="comment">//加上数组长度后，所有出现过的数值的索引都会大于len</span></span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= len) &#123;  <span class="comment">//小于len就说明该数值没有出现过，添加到ans</span></span><br><span class="line">                ret..add(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210904163646180.png" alt="image-20210904163646180"></p>
<h3 id="442-数组中重复的数据">442.数组中重复的数据</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210905191936088.png" alt="image-20210905191936088"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序后前后数值对比，重复的加入到结果中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays..sort(nums);  <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) result..add(nums[i]);  <span class="comment">//对比，前后数值相同就加入到结果中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210905192118065.png" alt="image-20210905192118065"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//哈希标记</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = (x - <span class="number">1</span>) % len;  <span class="comment">//数组坐标是0-（len-1），所以减一除以长度就是该数值的索引</span></span><br><span class="line">            nums[y] += len;  <span class="comment">//数值索引位置的值加上数组长度</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">2</span> * len) result..add(i + <span class="number">1</span>);  <span class="comment">//如果数值出现两次，在上方就会加上了两次len，</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210905192011000.png" alt="image-20210905192011000"></p>
<h3 id="41-缺失的第一个正数">41.缺失的第一个正数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210907153657454.png" alt="image-20210907153657454"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*哈希表记录（参考力扣官方解析，来源：力扣（LeetCode））</span></span><br><span class="line"><span class="comment">	对于一个长度为N的数组，其中没有出现的最小正整数只能在[1,N+1] 中。这是因为如果[1,N] 都出现了，那么答案是N+1，否则答案是[1,N] 中没有出现的最小正整数。</span></span><br><span class="line"><span class="comment">	所以我们先将负数都设置为大于数组长度len的数，再将数值小于等于len的数的索引位置取负数，这样就可以再次遍历数组，第一个出现正数的数组下标加1就是最终结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="comment">// 将负数都取大于len的数，我们取len+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将小于等于len的元素对应的位置变为负数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = Math..abs(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= len) &#123;</span><br><span class="line">                nums[num - <span class="number">1</span>] = -Math..abs(nums[num - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回第一个大于0的元素下标+1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt;= <span class="number">0</span>) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210907153834803.png" alt="image-20210907153834803"></p>
<h3 id="274-H指数">274.H指数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210908141157229.png" alt="image-20210908141157229"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*排序法</span></span><br><span class="line"><span class="comment">	将数组排序，并从大到小遍历，最初将h设为0，每次遍历的值大于h，就将h+1，直到h无法再增加。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        Arrays..sort(citations);</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = citations..length - <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; citations[i] &gt; h) &#123;</span><br><span class="line">            h++; </span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210908141454984.png" alt="image-20210908141454984"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*数组计数</span></span><br><span class="line"><span class="comment">	根据题目可知h是一个不大于论文篇数n的数；建立一个数组来记录每个h的论文篇数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = citations..length;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] counter = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];  <span class="comment">//计数数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (citations[i] &gt;= n) &#123;  <span class="comment">//因为h不大于论文篇数n，大于总篇数n的全部放在count[n]中</span></span><br><span class="line">                counter[n]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                counter[citations[i]]++;  <span class="comment">//记录每个h的论文篇数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;  <span class="comment">//从大到小遍历</span></span><br><span class="line">            total += counter[i];  <span class="comment">//大于或等于当前引用次数i的总论文数</span></span><br><span class="line">            <span class="keyword">if</span> (total &gt;= i) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210908142010151.png" alt="image-20210908142010151"></p>
<h2 id="2-3、数组的改变、移动">2.3、数组的改变、移动</h2>
<h3 id="453-最小操作次数使数组元素相等">453.最小操作次数使数组元素相等</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20210909162000724.png" alt="image-20210909162000724"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*排序法</span></span><br><span class="line"><span class="comment">	思路：本题正向思路是每次给n-1个元素+1，最少几次使得数组元素全部相等。我们可以反向思考一下，其实就是将最大的元素-1然后所有元素+1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays..sort(nums);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            res += nums[i] - nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210909162037605.png" alt="image-20210909162037605"></p>
<h3 id="283-移动零">283.移动零</h3>
<p><img src="/algo-array/image-20210924143623905.png" alt="image-20210924143623905"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;  <span class="comment">// 记录0的个数</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i - count] = nums[i];  <span class="comment">// 将非0数字往前移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums[len - count] = <span class="number">0</span>;  <span class="comment">// 后面补0</span></span><br><span class="line">            count --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210924143743347.png" alt="image-20210924143743347"></p>
<h2 id="2-4、二维数组及滚动数组">2.4、二维数组及滚动数组</h2>
<h3 id="118-杨辉三角">118.杨辉三角</h3>
<p><img src="/algo-array/image-20210924145516923.png" alt="image-20210924145516923"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;  <span class="comment">// 前后添加1</span></span><br><span class="line">                    row..add(<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    row..add(ret..get(i - <span class="number">1</span>)..get(j - <span class="number">1</span>) + ret..get(i - <span class="number">1</span>)..get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret..add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210924145648020.png" alt="image-20210924145648020"></p>
<h3 id="119-杨辉三角II">119.杨辉三角II</h3>
<p><img src="/algo-array/image-20210924150107217.png" alt="image-20210924150107217"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; C = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rowIndex; ++i) &#123;</span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">                    row..add(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    row..add(C..get(i - <span class="number">1</span>)..get(j - <span class="number">1</span>) + C..get(i - <span class="number">1</span>)..get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            C..add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C..get(rowIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210924150203187.png" alt="image-20210924150203187"></p>
<h3 id="598-范围求和II">598.范围求和II</h3>
<p><img src="/algo-array/image-20210925141511488.png" alt="image-20210925141511488"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 本题可以用暴力解法，但是复杂度比较大</span></span><br><span class="line"><span class="comment">* 据题意，每次增加1都是从数组[0][0]开始，所以会有交集，最大整数肯定出现在数值[0][0]的这个交集中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] ops)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] op: ops) &#123;</span><br><span class="line">            m = Math..min(m, op[<span class="number">0</span>]);</span><br><span class="line">            n = Math..min(n, op[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20210925142530640.png" alt="image-20210925142530640"></p>
<h2 id="2-5、数组的旋转">2.5、数组的旋转</h2>
<h3 id="189-旋转数组">189.旋转数组</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211008113105216.png" alt="image-20211008113105216"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接暴力解法（超时），直接一个一个的移动</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[len-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len-<span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            nums[<span class="number">0</span>] = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组反转（参考力扣官方解析）</span></span><br><span class="line"><span class="comment">// 基本步骤：先将数组整体翻转，在分别翻转前后两个部分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        k %= nums..length;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, nums..length - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, k, nums..length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start += <span class="number">1</span>;</span><br><span class="line">            end -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>原始数组</td>
<td>1 2 3 4 5 6 7</td>
</tr>
<tr>
<td>翻转所有元素</td>
<td>7 6 5 4 3 2 1</td>
</tr>
<tr>
<td>翻转[0, k mod n-1]区间的元素</td>
<td>5 6 7 4 3 2 1</td>
</tr>
<tr>
<td>翻转[k mod n, n-1]区间的元素</td>
<td>5 6 7 1 2 3 4</td>
</tr>
</tbody>
</table>
<h3 id="396-旋转函数">396.旋转函数</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211009110251883.png" alt="image-20211009110251883"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在上一题的基础上修改(超时)，每一翻转一个数，计算总和比大小。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRotateFunction</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums..length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            max += i * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums..length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            reverse(nums, <span class="number">0</span>, nums..length - <span class="number">1</span>);</span><br><span class="line">            reverse(nums, <span class="number">1</span>, nums..length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums..length; j++) &#123;</span><br><span class="line">                sum += j * nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max) max = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start += <span class="number">1</span>;</span><br><span class="line">            end -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：错位相减法</p>
<p>（作者：yixingzhang 链接：<a href="https://leetcode-cn.com/problems/rotate-function/solution/qian-lu-qi-qu-wang-wo-men-ke-yi-hu-xiang-iqax/">https://leetcode-cn.com/problems/rotate-function/solution/qian-lu-qi-qu-wang-wo-men-ke-yi-hu-xiang-iqax/</a>](<a href="https://leetcode-cn.com/u/yixingzhang/">https://leetcode-cn.com/u/yixingzhang/</a>)）</p>
<p>$$<br>
F(k) = 0 * A[0] + 1 * A[1] + … + (n-1) * A[n-1] \<br>
F(k+1) = 0 * A[n-1] + 1 * A[0] + 2 * A[1] + … + (n-1) * A[n-2] \<br>
F(k+1) - F(k) = -(n-1) * A[n-1] + 1 * A[0] + 1 * A[1] + … + 1 * A[n-2] \<br>
F(k+1) = F(k) - n * A[n-1] + 所有数的和 \<br>
F(k+i) = F(k+i-1) - n * A[n-i] + 所有数的和<br>
$$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用到了数学的错位相减，可能不一定能想到</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRotateFunction</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums..length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 统计数组所有数的和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 计算 F(0) 的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            max += count++ * i;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录上一个计算结果</span></span><br><span class="line">        <span class="keyword">int</span> tmp = max;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 利用等差数列求解</span></span><br><span class="line">            tmp = tmp + sum - n * nums[n - i];</span><br><span class="line">            <span class="keyword">if</span> (max &lt; tmp) &#123;</span><br><span class="line">                max = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211010095254289.png" alt="image-20211010095254289"></p>
<h2 id="2-6、特定顺序遍历二维数组">2.6、特定顺序遍历二维数组</h2>
<h3 id="54-螺旋矩阵">54.螺旋矩阵</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211021125924036.png" alt="image-20211021125924036"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路（参考力扣）：</span></span><br><span class="line"><span class="comment">	本题的数组循环不再是简单的双重选好就可以解决。可以看到仔细观察，这个循环的一个周期是什么，起止分别是什么：</span></span><br><span class="line"><span class="comment">	左上——》右上——》右下——》左下——》左上——》（第二个循环的左上）D:\Learning\PersonalBlog\CodeChenBlog\source/algo-arrayD:\Learning\PersonalBlog\CodeChenBlog\source/algo-arrayD:\Learning\PersonalBlog\CodeChenBlog\source/algo-array..</span></span><br><span class="line"><span class="comment">	这是一个完整的循环，所以依照这个思路写算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> rows = matrix..length, columns = matrix[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = columns - <span class="number">1</span>, top = <span class="number">0</span>, bottom = rows - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix..length == <span class="number">0</span> || matrix[<span class="number">0</span>]..length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line">            <span class="comment">// 左上——》右上</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> column = left; column &lt;= right; column++)&#123;</span><br><span class="line">                res..add(matrix[top][column]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右上——》右下</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> row = top + <span class="number">1</span>; row &lt;= bottom; row++)&#123;</span><br><span class="line">                res..add(matrix[row][right]);</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">            <span class="keyword">if</span> (left &lt; right &amp;&amp; top &lt; bottom) &#123;</span><br><span class="line">                <span class="comment">// 右下——》左下</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> column = right - <span class="number">1</span>; column &gt;= left; column--) &#123;</span><br><span class="line">                    res..add(matrix[bottom][column]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 左下——》左上</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> row = bottom - <span class="number">1</span>; row &gt; top; row--) &#123;</span><br><span class="line">                    res..add(matrix[row][left]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 四个边界都向中间收拢</span></span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            top++;</span><br><span class="line">            bottom--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/C:%5CUsers%5C86158%5CDesktop%5C%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211021124843.png" alt="微信图片_20211021124843"></p>
<h3 id="59-螺旋矩阵II">59.螺旋矩阵II</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211023135855902.png" alt="image-20211023135855902"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	这个题和上一个题其实是一样的，上一个题给了一个二维数组，需要螺旋给出相应结果；本题需要自己螺旋的建立一个数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>, top = <span class="number">0</span>, bottom = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> column = left; column &lt;= right; column++) &#123;</span><br><span class="line">                matrix[top][column] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> row = top + <span class="number">1</span>; row &lt;= bottom; row++) &#123;</span><br><span class="line">                matrix[row][right] = num;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt; right &amp;&amp; top &lt; bottom) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> column = right -<span class="number">1</span>; column &gt;= left; column--) &#123;</span><br><span class="line">                    matrix[bottom][column] = num;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> row = bottom - <span class="number">1</span>; row &gt; top; row--) &#123;</span><br><span class="line">                    matrix[row][left] = num;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            top++;</span><br><span class="line">            bottom--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211023112532355.png" alt="image-20211023112532355"></p>
<h3 id="498-对角线遍历">498.对角线遍历</h3>
<p>题目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">（参考力扣官方解析）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findDiagonalOrder(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix..length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> N = matrix..length;</span><br><span class="line">        <span class="keyword">int</span> M = matrix[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, column = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定标志位来确定对角线走向，向上走还是向下走</span></span><br><span class="line">        <span class="keyword">int</span> direction = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[N*M];</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (row &lt; N &amp;&amp; column &lt; M) &#123;</span><br><span class="line">            </span><br><span class="line">            result[r++] = matrix[row][column];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过判断对角线走向来给row和column进行加或减</span></span><br><span class="line">            <span class="keyword">int</span> new_row = row + (direction == <span class="number">1</span> ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> new_column = column + (direction == <span class="number">1</span> ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否是对角线走向最后一个元素 </span></span><br><span class="line">            <span class="keyword">if</span> (new_row &lt; <span class="number">0</span> || new_row == N || new_column &lt; <span class="number">0</span> || new_column == M) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (direction == <span class="number">1</span>) &#123;</span><br><span class="line">                    row += (column == M - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>) ;</span><br><span class="line">                    column += (column &lt; M - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    column += (row == N - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                    row += (row &lt; N - <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 转向</span></span><br><span class="line">                direction = <span class="number">1</span> - direction;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                row = new_row;</span><br><span class="line">                column = new_column;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211023223126569.png" alt="image-20211023223126569"></p>
<h2 id="2-7、二维数组变换">2.7、二维数组变换</h2>
<h3 id="566-重塑矩阵">566.重塑矩阵</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211024111542427.png" alt="image-20211024111542427"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解法一：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] matrixReshape(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span> r, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">int</span> M = mat..length;</span><br><span class="line">        <span class="keyword">int</span> N = mat[<span class="number">0</span>]..length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出不合理，返回原数组</span></span><br><span class="line">        <span class="keyword">if</span> (M * N != r * c) &#123;</span><br><span class="line">            <span class="keyword">return</span> mat;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建结果数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, col = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="comment">// 控制结果数组的换行，当col到最后一列时就换行，将row+1换行，col置0，重新从第一列第row+1行开始存数据</span></span><br><span class="line">                <span class="keyword">if</span> (col == c) &#123;</span><br><span class="line">                    row += <span class="number">1</span>;</span><br><span class="line">                    col = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res[row][col] = mat[i][j];</span><br><span class="line">                col += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211024111509427.png" alt="image-20211024111509427"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解法二(力扣官方解析):主要就是在存储数据时用了数学的除和取余，可能一般不一定能想到，思想和解法一是类似的，都是以列为基准来控制换行，取余就是列在递增，除整就是控制换行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] matrixReshape(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span> r, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = mat..length;</span><br><span class="line">        <span class="keyword">int</span> n = mat[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">if</span> (m * n != r * c) &#123;</span><br><span class="line">            <span class="keyword">return</span> mat;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[r][c];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; m * n; ++x) &#123;</span><br><span class="line">            ans[x / c][x % c] = mat[x / n][x % n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211024112152336.png" alt="image-20211024112152336"></p>
<h3 id="48-旋转图像">48.旋转图像</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211025111528637.png" alt="image-20211025111528637"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参考力扣官方解析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix..length;</span><br><span class="line">        <span class="comment">// 水平翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[n - i - <span class="number">1</span>][j];</span><br><span class="line">                matrix[n - i - <span class="number">1</span>][j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 主对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211025111659404.png" alt="image-20211025111659404"></p>
<h3 id="73-矩阵置零">73.矩阵置零</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028100343736.png" alt="image-20211028100343736"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参考：</span></span><br><span class="line"><span class="comment">作者：powcai</span></span><br><span class="line"><span class="comment">链接：https://leetcode-cn..com/problems/set-matrix-zeroes/solution/o1kong-jian-by-powcai/</span></span><br><span class="line"><span class="comment">来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这么版本较好理解</span></span><br><span class="line"><span class="comment">解析：主要需要想到将第一行和第一列作为标志位，最后的置零就通过第一行和第一列来判断是否置零。</span></span><br><span class="line"><span class="comment">	1、设置两个标志记录第一行和第一列是否存在0</span></span><br><span class="line"><span class="comment">	2、遍历除第一行和第一列元素，如果是0就将对应的第一行和第一列元素置零</span></span><br><span class="line"><span class="comment">	3、最后通过第一行和第一列为0的对应行和列置零</span></span><br><span class="line"><span class="comment">	4、第一步的两个标志如果是第一行和第一列原始数据就存在0，就需要将第一行或（和）第一列置零</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = matrix..length;</span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>]..length;</span><br><span class="line">        <span class="keyword">boolean</span> row0_flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> col0_flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 第一行是否有零</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                row0_flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一列是否有零</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                col0_flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把第一行第一列作为标志位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 置0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span> || matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (row0_flag) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (col0_flag) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211026111942252.png" alt="image-20211026111942252"></p>
<h2 id="2-8、前缀和数组">2.8、前缀和数组</h2>
<h3 id="303-区域和检索-数据不可变">303.区域和检索-数据不可变</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028100658628.png" alt="image-20211028100658628"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析：主要在数据处理时就将每一个数的前缀和求出，并存储起来，最后简单计算返回结果即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] sums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums..length;</span><br><span class="line">        sums = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sums[i + <span class="number">1</span>] = sums[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sums[right + <span class="number">1</span>] - sums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211028100843776.png" alt="image-20211028100843776"></p>
<h3 id="304-二维区域和检索-矩阵不可变">304.二维区域和检索 - 矩阵不可变</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028101439324.png" alt="image-20211028101439324"></p>
<p><img src="/algo-array/1614646585-JOesrN-304.002.jpeg" alt="1614646585-JOesrN-304.002.jpeg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析：本题思路和上一题一样，需要处理数据，存储所有的前缀和，但是二维数据计算前缀和会复杂一点。需要将整体和一些局部相加减。</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] sums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix..length;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = matrix[<span class="number">0</span>]..length;</span><br><span class="line">            sums = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="comment">// 当前格子的和 = 上方的格子的和 + 左边的格子的和的 - 左上角的格子的和 + 当前格子的值[和是指对应的前缀和，值是指原数组中的值]</span></span><br><span class="line">                    sums[i + <span class="number">1</span>][j + <span class="number">1</span>] = sums[i][j + <span class="number">1</span>] + sums[i + <span class="number">1</span>][j] - sums[i][j] + matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sums[row2 + <span class="number">1</span>][col2 + <span class="number">1</span>] - sums[row1][col2 + <span class="number">1</span>] - sums[row2 + <span class="number">1</span>][col1] + sums[row1][col1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211028101712061.png" alt="image-20211028101712061"></p>
<h3 id="238-除自身意外数组的乘积">238.除自身意外数组的乘积</h3>
<p>题目：</p>
<p><img src="/algo-array/image-20211028141727060.png" alt="image-20211028141727060"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作者：LeetCode-Solution</span></span><br><span class="line"><span class="comment">链接：https://leetcode-cn..com/problems/product-of-array-except-self/solution/chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode-/</span></span><br><span class="line"><span class="comment">来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解析：简单的使用双重循环求结果会超时，所以需要优化。</span></span><br><span class="line"><span class="comment">为了减少计算次数，我们需要将每次计算结果存储，每次就只需要乘一次。</span></span><br><span class="line"><span class="comment">建立一个数组answer，存结果。首先从左遍历原数据，将左边的数据相乘存储在answer中，从而得到所有的左边乘积。</span></span><br><span class="line"><span class="comment">再在answer中从右边开始遍历，设定一个变量存储右边的乘积，每次将右边的乘积乘以左边的乘积answer[i]，最后得到的answer就是结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums..length;</span><br><span class="line">        <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// answer[i] 表示索引 i 左侧所有元素的乘积</span></span><br><span class="line">        <span class="comment">// 因为索引为 &#x27;0&#x27; 的元素左侧没有元素， 所以 answer[0] = 1</span></span><br><span class="line">        answer[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            answer[i] = nums[i - <span class="number">1</span>] * answer[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// R 为右侧所有元素的乘积</span></span><br><span class="line">        <span class="comment">// 刚开始右边没有元素，所以 R = 1</span></span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 对于索引 i，左边的乘积为 answer[i]，右边的乘积为 R</span></span><br><span class="line">            answer[i] = answer[i] * R;</span><br><span class="line">            <span class="comment">// R 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 R 上</span></span><br><span class="line">            R *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/algo-array/image-20211028142110706.png" alt="image-20211028142110706"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>算法</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的*args和**kwargs</title>
    <url>/pyArgsKwargs/</url>
    <content><![CDATA[<h1 id="args和-kwargs"><a href="#args和-kwargs" class="headerlink" title="*args和**kwargs"></a>*args和**kwargs</h1><p><code>*args</code> 和 <code>**kwargs</code> 主要用于函数定义。 你可以将不定数量的参数传递给一个函数。</p>
<p>这里的不定的意思是：预先并不知道, 函数使用者会传递多少个参数给你, 所以在这个场景下使用这两个关键字。</p>
<span id="more"></span>

<ul>
<li><p><code>*args</code> 是用来发送一个非键值对的可变数量的参数列表给一个函数.</p>
<p>这里有个例子帮你理解这个概念:</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def test_var_args(f_arg, *argv):</span><br><span class="line">    print(&quot;first normal arg:&quot;, f_arg)</span><br><span class="line">    for arg in argv:</span><br><span class="line">        print(&quot;another arg through *argv:&quot;, arg)</span><br><span class="line"></span><br><span class="line">test_var_args(&#x27;yasoob&#x27;, &#x27;python&#x27;, &#x27;eggs&#x27;, &#x27;test&#x27;)</span><br></pre></td></tr></table></figure>

<p>这会产生如下输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">first normal arg: yasoob</span><br><span class="line">another arg through *argv: python</span><br><span class="line">another arg through *argv: eggs</span><br><span class="line">another arg through *argv: test</span><br></pre></td></tr></table></figure>



<ul>
<li><p><code>**kwargs</code> 允许你将不定长度的<strong>键值对</strong>, 作为参数传递给一个函数。 如果你想要在一个函数里处理<strong>带名字的参数</strong>, 你应该使用<code>**kwargs</code>。</p>
<p>这里有个让你上手的例子:</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_me</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; == &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(key, value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet_me(name=<span class="string">&quot;yasoob&quot;</span>)</span><br><span class="line">name == yasoob</span><br></pre></td></tr></table></figure>

<p>现在你可以看出我们怎样在一个函数里, 处理了一个<strong>键值对</strong>参数了。</p>
<p>这就是<code>**kwargs</code>的基础, 而且你可以看出它有多么管用。 接下来让我们谈谈，你怎样使用<code>*args</code> 和 <code>**kwargs</code>来调用一个参数为列表或者字典的函数。</p>
<ul>
<li><p>使用*args和**kwargs来调用函数</p>
<p>那现在我们将看到怎样使用<code>*args</code>和<code>**kwargs</code> 来调用一个函数。 假设，你有这样一个小函数：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_args_kwargs</span>(<span class="params">arg1, arg2, arg3</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg1:&quot;</span>, arg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg2:&quot;</span>, arg2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;arg3:&quot;</span>, arg3)</span><br></pre></td></tr></table></figure>

<p>你可以使用<code>*args</code>或<code>**kwargs</code>来给这个小函数传递参数。 下面是怎样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先使用 *args</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="string">&quot;two&quot;</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_args_kwargs(*args)</span><br><span class="line">arg1: two</span><br><span class="line">arg2: <span class="number">3</span></span><br><span class="line">arg3: <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在使用 **kwargs:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwargs = &#123;<span class="string">&quot;arg3&quot;</span>: <span class="number">3</span>, <span class="string">&quot;arg2&quot;</span>: <span class="string">&quot;two&quot;</span>, <span class="string">&quot;arg1&quot;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_args_kwargs(**kwargs)</span><br><span class="line">arg1: <span class="number">5</span></span><br><span class="line">arg2: two</span><br><span class="line">arg3: <span class="number">3</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>标准参数与<code>*args、**kwargs</code>在使用时的顺序</p>
<p>那么如果你想在函数里同时使用所有这三种参数， 顺序是这样的：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">some_func(fargs, *args, **kwargs)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>何时使用？</p>
<p>这需要根据需求而定。最常见的用例是在写函数装饰器的时候。</p>
<p>此外它也可以用来做猴子补丁(monkey patching)。猴子补丁的意思是在程序运行时(runtime)修改某些代码。 打个比方，你有一个类，里面有个叫<code>get_info</code>的函数会调用一个API并返回相应的数据。如果我们想测试它，可以把API调用替换成一些测试数据。例如：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> someclass</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span>(<span class="params">self, *args</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test data&quot;</span></span><br><span class="line"></span><br><span class="line">someclass.get_info = get_info</span><br></pre></td></tr></table></figure>



<p>文章内容来自：<a href="https://docs.pythontab.com/interpy/args_kwargs/When_to_use/">https://docs.pythontab.com/interpy/args_kwargs/When_to_use/</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode精选TOP面试题——简单篇</title>
    <url>/algo-interviewTop-easy/</url>
    <content><![CDATA[<h1>LeetCode 精选 TOP 面试题——简单篇</h1>
<p>TOP 面试题简单篇，以下解析为Python语言。</p>
<span id="more"></span>
<h1>1.两数之和</h1>
<p>题目：</p>
<p><img src="/algo-interviewTop-easy/1-1.jpg" alt></p>
<p>解析：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 哈希表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="comment"># 建立一个哈希表</span></span><br><span class="line">        hashtable = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> hashtable:</span><br><span class="line">                <span class="keyword">return</span> [hashtable[target - num], i]</span><br><span class="line">            hashtable[nums[i]] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<h1>13.罗马数字转整数</h1>
<p>题目：</p>
<p><img src="/algo-interviewTop-easy/13-1.jpg" alt></p>
<p>解析：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        Roman2Int = &#123;<span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span>&#125;</span><br><span class="line">        Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> Roman2Int[s[index]] &lt; Roman2Int[s[index + <span class="number">1</span>]]:</span><br><span class="line">                Int -= Roman2Int[s[index]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Int += Roman2Int[s[index]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Int + Roman2Int[s[-<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>
<h1>14.最长公共前缀</h1>
<p>题目：</p>
<p><img src="/algo-interviewTop-easy/14-1.jpg" alt></p>
<p>解析:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 求出所有字符串中最短的字符串长度</span></span><br><span class="line">        str_len = <span class="built_in">len</span>(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &lt; str_len:</span><br><span class="line">                str_len = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 字符串中一个一个字符比较</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(str_len):</span><br><span class="line">            c = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strs:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span>[i] != c:</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">            res += c</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>python</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络体系结构</title>
    <url>/net-hierarchicalDivision/</url>
    <content><![CDATA[<ul>
<li><p>常见的计算机网络体系结构</p>
<span id="more"></span></li>
</ul>
<p><img src="/net-hierarchicalDivision/image-20211222215636759.png"></p>
<blockquote>
<ul>
<li>物理层：<strong>该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。</strong>物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</li>
<li>数据链路层：该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。基本数据单位为帧。主要的协议为以太网协议。两个重要的设备名称为网桥和交换机。</li>
<li>网络层：具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。</li>
<li>传输层：传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。包含的主要协议：TCP协议（Transmission Control Protocol，传输控制协议）、UDP协议（User Datagram Protocol，用户数据报协议）；重要设备：网关。</li>
<li>会话层：会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</li>
<li>表示层：表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</li>
<li>应用层：为操作系统或网络应用程序提供访问网络服务的接口。</li>
</ul>
<p>会话层、表示层和应用层重点：</p>
<ul>
<li>1&gt; 数据传输基本单位为报文；</li>
<li>2&gt; 包含的主要协议：FTP（文件传送协议）、Telnet（远程登录协议）、DNS（域名解析协议）、SMTP（邮件传送协议），POP3协议（邮局协议），HTTP协议（Hyper Text Transfer Protocol）。</li>
</ul>
</blockquote>
<p><img src="/net-hierarchicalDivision/image-20211222221854834.png"></p>
<p>数据传输过程，详情看：<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=9&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1c4411d7jb?p=9&amp;spm_id_from=pageDriver</a></p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
